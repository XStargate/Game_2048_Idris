#!/usr/bin/scheme --script

(import (chezscheme))
(case (machine-type)
  [(i3le ti3le a6le ta6le) (load-shared-object "libc.so.6")]
  [(i3osx ti3osx a6osx ta6osx) (load-shared-object "libc.dylib")]
  [(i3nt ti3nt a6nt ta6nt) (load-shared-object "msvcrt.dll")]
  [else (load-shared-object "libc.so")])



(let ()
(define blodwen-read-args (lambda (desc)
  (case (vector-ref desc 0)
    ((0) '())
    ((1) (cons (vector-ref desc 2)
               (blodwen-read-args (vector-ref desc 3)))))))
(define b+ (lambda (x y bits) (remainder (+ x y) (expt 2 bits))))
(define b- (lambda (x y bits) (remainder (- x y) (expt 2 bits))))
(define b* (lambda (x y bits) (remainder (* x y) (expt 2 bits))))
(define b/ (lambda (x y bits) (remainder (floor (/ x y)) (expt 2 bits))))

(define blodwen-shl (lambda (x y) (ash x y)))
(define blodwen-shr (lambda (x y) (ash x (- y))))
(define blodwen-and (lambda (x y) (logand x y)))
(define blodwen-or (lambda (x y) (logor x y)))
(define blodwen-xor (lambda (x y) (logxor x y)))

(define cast-num
  (lambda (x)
    (if (number? x) x 0)))
(define destroy-prefix
  (lambda (x)
    (cond
      ((equal? x "") "")
      ((equal? (string-ref x 0) #\#) "")
      (else x))))
(define cast-string-int
  (lambda (x)
    (floor (cast-num (string->number (destroy-prefix x))))))
(define cast-string-double
  (lambda (x)
    (cast-num (string->number (destroy-prefix x)))))
(define string-cons (lambda (x y) (string-append (string x) y)))
(define get-tag (lambda (x) (vector-ref x 0)))
(define string-reverse (lambda (x)
  (list->string (reverse (string->list x)))))
(define (string-substr off len s)
    (let* ((l (string-length s))
          (b (max 0 off))
          (x (max 0 len))
          (end (min l (+ b x))))
          (substring s b end)))

(define either-left
  (lambda (x)
    (vector 0 #f #f x)))

(define either-right
  (lambda (x)
    (vector 1 #f #f x)))

(define blodwen-error-quit
  (lambda (msg)
    (display msg)
    (newline)
    (exit 1)))

;; Buffers

(define (blodwen-new-buffer size)
  (make-bytevector size 0))

(define (blodwen-buffer-size buf)
  (bytevector-length buf))

(define (blodwen-buffer-setbyte buf loc val)
  (bytevector-u8-set! buf loc val))

(define (blodwen-buffer-getbyte buf loc)
  (bytevector-u8-ref buf loc))

(define (blodwen-buffer-setint buf loc val)
  (bytevector-s32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint buf loc)
  (bytevector-s32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setdouble buf loc val)
  (bytevector-ieee-double-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getdouble buf loc)
  (bytevector-ieee-double-ref buf loc (native-endianness)))

(define (blodwen-stringbytelen str)
  (bytevector-length (string->utf8 str)))

(define (blodwen-buffer-setstring buf loc val)
  (let* [(strvec (string->utf8 val))
         (len (bytevector-length strvec))]
    (bytevector-copy! strvec 0 buf loc len)))

(define (blodwen-buffer-getstring buf loc len)
  (let [(newvec (make-bytevector len))]
    (bytevector-copy! buf loc newvec 0 len)
    (utf8->string newvec)))

(define (blodwen-buffer-copydata buf start len dest loc)
  (bytevector-copy! buf start dest loc len))

(define (blodwen-readbuffer-bytes h buf loc max)
  (guard (x (#t -1))
    (get-bytevector-n! h buf loc max)))

(define (blodwen-readbuffer h)
  (guard (x (#t (bytevector)))
    (get-bytevector-all h)))

(define (blodwen-writebuffer h buf loc max)
  (guard (x (#t -1))
     (put-bytevector h buf loc max)
     max))

;; Files: Much of the following adapted from idris-chez, thanks to Niklas
;; Larsson

;; All the file operations are implemented as primitives which return
;; Either Int x, where the Int is an error code:
(define (blodwen-error-code x)
    (cond
        ((i/o-read-error? x) 1)
        ((i/o-write-error? x) 2)
        ((i/o-file-does-not-exist-error? x) 3)
        ((i/o-file-protection-error? x) 4)
        (else 255)))

;; If the file operation raises an error, catch it and return an appropriate
;; error code
(define (blodwen-file-op op)
  (guard
    (x ((i/o-error? x) (either-left (blodwen-error-code x))))
    (either-right (op))))

(define (blodwen-get-n n p)
    (if (port? p) (get-string-n p n) ""))

(define (blodwen-putstring p s)
    (if (port? p) (put-string p s) void)
    0)

(define (blodwen-open file mode bin)
    (define tc (if (= bin 1) #f (make-transcoder (utf-8-codec))))
    (define bm (buffer-mode line))
    (case mode
        (("r") (open-file-input-port file (file-options) bm tc))
        (("w") (open-file-output-port file (file-options no-fail) bm tc))
        (("wx") (open-file-output-port file (file-options) bm tc))
        (("a") (open-file-output-port file (file-options no-fail no-truncate) bm tc))
        (("r+") (open-file-input/output-port file (file-options no-create) bm tc))
        (("w+") (open-file-input/output-port file (file-options no-fail) bm tc))
        (("w+x") (open-file-input/output-port file (file-options) bm tc))
        (("a+") (open-file-input/output-port file (file-options no-fail no-truncate) bm tc))
        (else (raise (make-i/o-error)))))

(define (blodwen-close-port p)
    (when (port? p) (close-port p)))

(define (blodwen-get-line p)
    (if (and (port? p) (not (port-eof? p)))
        (let ((str (get-line p)))
            (string-append str "\n"))
        ""))

(define (blodwen-get-char p)
    (if (and (port? p) (not (port-eof? p)))
        (get-char p)
        #\nul))

(define (blodwen-file-modified-time p)
    (time-second (file-modification-time p)))

(define (blodwen-file-size p)
    (port-length p))

(define (blodwen-eof p)
    (if (port-eof? p)
        1
        0))

;; Directories

(define (blodwen-current-directory)
  (current-directory))

(define (blodwen-change-directory dir)
  (if (file-directory? dir)
      (begin (current-directory dir) 1)
      0))

(define (blodwen-create-directory dir)
  (blodwen-file-op (lambda () (mkdir dir) 0)))

; Scheme only gives a primitive for reading all the files in a directory,
; so this is faking the C interface!
(define (blodwen-open-directory dir)
  (blodwen-file-op (lambda () (box (directory-list dir)))))

(define (blodwen-close-directory dir) '()) ; no-op, it's not really open

(define (blodwen-next-dir-entry dir)
  (let [(dlist (unbox dir))]
    (if (null? dlist)
      (either-left 255)
      (begin (set-box! dir (cdr dlist))
             (either-right (car dlist))))))

;; Threads

(define blodwen-thread-data (make-thread-parameter #f))

(define (blodwen-thread p)
    (fork-thread (lambda () (p (vector 0)))))

(define (blodwen-get-thread-data)
  (blodwen-thread-data))

(define (blodwen-set-thread-data a)
  (blodwen-thread-data a))

(define (blodwen-mutex) (make-mutex))
(define (blodwen-lock m) (mutex-acquire m))
(define (blodwen-unlock m) (mutex-release m))
(define (blodwen-thisthread) (get-thread-id))

(define (blodwen-condition) (make-condition))
(define (blodwen-condition-wait c m) (condition-wait c m))
(define (blodwen-condition-wait-timeout c m t) (condition-wait c m t))
(define (blodwen-condition-signal c) (condition-signal c))
(define (blodwen-condition-broadcast c) (condition-broadcast c))

(define (blodwen-sleep s) (sleep (make-time 'time-duration 0 s)))
(define (blodwen-usleep s)
  (let ((sec (div s 1000000))
        (micro (mod s 1000000)))
       (sleep (make-time 'time-duration (* 1000 micro) sec))))

(define (blodwen-time) (time-second (current-time)))

(define (blodwen-args)
  (define (blodwen-build-args args)
    (if (null? args)
        (vector 0 '())
        (vector 1 '() (car args) (blodwen-build-args (cdr args)))))
    (blodwen-build-args (command-line)))

(define (blodwen-hasenv var)
  (if (eq? (getenv var) #f) 0 1))

(define (blodwen-system cmd)
  (system cmd))
(define prim__add_Int (lambda (v-0 v-1) (b+ v-0 v-1 63)))
(define prim__add_Integer (lambda (v-0 v-1) (+ v-0 v-1)))
(define prim__sub_Int (lambda (v-0 v-1) (b- v-0 v-1 63)))
(define prim__sub_Integer (lambda (v-0 v-1) (- v-0 v-1)))
(define prim__mul_Int (lambda (v-0 v-1) (b* v-0 v-1 63)))
(define prim__mul_Integer (lambda (v-0 v-1) (* v-0 v-1)))
(define prim__div_Int (lambda (v-0 v-1) (b/ v-0 v-1 63)))
(define prim__mod_Int (lambda (v-0 v-1) (remainder v-0 v-1)))
(define prim__shr_Int (lambda (v-0 v-1) (blodwen-shr v-0 v-1)))
(define prim__lt_Int (lambda (v-0 v-1) (or (and (< v-0 v-1) 1) 0)))
(define prim__lt_Integer (lambda (v-0 v-1) (or (and (< v-0 v-1) 1) 0)))
(define prim__lte_Int (lambda (v-0 v-1) (or (and (<= v-0 v-1) 1) 0)))
(define prim__lte_Integer (lambda (v-0 v-1) (or (and (<= v-0 v-1) 1) 0)))
(define prim__eq_Int (lambda (v-0 v-1) (or (and (= v-0 v-1) 1) 0)))
(define prim__eq_Integer (lambda (v-0 v-1) (or (and (= v-0 v-1) 1) 0)))
(define prim__eq_Char (lambda (v-0 v-1) (or (and (char=? v-0 v-1) 1) 0)))
(define prim__gte_Int (lambda (v-0 v-1) (or (and (>= v-0 v-1) 1) 0)))
(define prim__gte_Integer (lambda (v-0 v-1) (or (and (>= v-0 v-1) 1) 0)))
(define prim__gt_Int (lambda (v-0 v-1) (or (and (> v-0 v-1) 1) 0)))
(define prim__gt_Integer (lambda (v-0 v-1) (or (and (> v-0 v-1) 1) 0)))
(define prim__strHead (lambda (v-0) (string-ref v-0 0)))
(define prim__strAppend (lambda (v-0 v-1) (string-append v-0 v-1)))
(define prim__cast_IntString (lambda (v-0) (number->string v-0)))
(define prim__cast_IntegerInt (lambda (v-0) v-0))
(define n--2892-654-rowhasValue (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7 v-8 v-9 v-10 v-11) (let ((sc0 v-10)) (case (get-tag sc0) ((0) (let ((v-12 (vector-ref sc0 1))) (vector 1 ))) ((1) (let ((v-12 (vector-ref sc0 1))) (let ((v-13 (vector-ref sc0 2))) (let ((v-14 (vector-ref sc0 3))) (let ((v-15 (vector-ref sc0 4))) (Prelude-C-124C-124 (Prelude-C-61C-61_Eq__Int v-14 v-11) (lambda () (n--2892-654-rowhasValue v-0 v-1 v-2 v-3 4294 4294 v-6 v-7 v-8 4294 v-15 v-11))))))))))))
(define n--3520-1205-printRow (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-5)) (case (get-tag sc0) ((0) (let ((v-6 (vector-ref sc0 1))) (PrimIO-putStrLn ""))) ((1) (let ((v-6 (vector-ref sc0 1))) (let ((v-7 (vector-ref sc0 2))) (let ((v-8 (vector-ref sc0 3))) (let ((v-9 (vector-ref sc0 4))) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 (PrimIO-putStr (Strings-Prelude-C-43C-43 (Prelude-show_Show__Int v-8) "  ")) (lambda (v-10) (n--3520-1205-printRow 4294 4294 v-2 v-3 4294 v-9))))))))))))
(define n--3616-1301-posAvail (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7) (Main-arithInput v-6 (Main-countZero 4294 4294 v-7))))
(define n--3391-1080-natToInt (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (cond ((equal? sc0 0) ((Prelude-fromInteger_Num__Int) 0))(else (let ((v-4 (- v-3 1))) (((Prelude-C-43_Num__Int) ((Prelude-fromInteger_Num__Int) 1)) (n--3391-1080-natToInt v-0 v-1 v-2 v-4))))))))
(define n--2523-298-myTighten (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-4)) (cond ((equal? sc0 0) (let ((sc1 v-5)) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (vector 0 4294))))))(else (let ((v-6 (- v-4 1))) (let ((sc0 v-5)) (case (get-tag sc0) ((1) (let ((v-7 (vector-ref sc0 1))) (let ((v-8 (vector-ref sc0 2))) (let ((v-9 (vector-ref sc0 3))) (let ((v-10 (vector-ref sc0 4))) (Main-case--2543-321 v-0 4294 v-2 v-3 4294 v-6 v-9 v-10 (Prelude-C-61C-61_Eq__Int v-9 ((Prelude-fromInteger_Num__Int) 0))))))))))))))))
(define n--2523-299-myMerge (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-4)) (cond ((equal? sc0 0) (let ((sc1 v-5)) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (vector 0 4294))))))(else (let ((v-6 (- v-4 1))) (let ((sc0 v-6)) (cond ((equal? sc0 0) (let ((sc1 v-5)) (case (get-tag sc1) ((1) (let ((v-7 (vector-ref sc1 1))) (let ((v-8 (vector-ref sc1 2))) (let ((v-9 (vector-ref sc1 3))) (let ((v-10 (vector-ref sc1 4))) (let ((sc2 v-10)) (case (get-tag sc2) ((0) (let ((v-11 (vector-ref sc2 1))) v-5))))))))))))(else (let ((v-7 (- v-6 1))) (let ((sc0 v-5)) (case (get-tag sc0) ((1) (let ((v-8 (vector-ref sc0 1))) (let ((v-9 (vector-ref sc0 2))) (let ((v-10 (vector-ref sc0 3))) (let ((v-11 (vector-ref sc0 4))) (let ((sc1 v-11)) (case (get-tag sc1) ((1) (let ((v-12 (vector-ref sc1 1))) (let ((v-13 (vector-ref sc1 2))) (let ((v-14 (vector-ref sc1 3))) (let ((v-15 (vector-ref sc1 4))) (Main-case--2544-412 v-0 4294 v-2 v-3 4294 v-7 v-10 v-14 v-15 (Prelude-C-61C-61_Eq__Int v-10 v-14))))))))))))))))))))))))))
(define n--3391-1078-initHelper (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7 v-8) (Main-addNum 4294 4294 (Main-addNum 4294 4294 (Vect-Data-replicate 4294 v-3 (Vect-Data-replicate 4294 v-4 ((Prelude-fromInteger_Num__Int) 0))) v-5 v-6) v-7 v-8)))
(define n--2881-636-hasNum (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7) (let ((sc0 v-6)) (case (get-tag sc0) ((0) (let ((v-8 (vector-ref sc0 1))) (vector 1 ))) ((1) (let ((v-8 (vector-ref sc0 1))) (let ((v-9 (vector-ref sc0 2))) (let ((v-10 (vector-ref sc0 3))) (let ((v-11 (vector-ref sc0 4))) (Prelude-C-124C-124 (n--2892-654-rowhasValue v-0 v-1 v-2 v-3 4294 4294 v-10 v-11 v-7 4294 v-10 v-7) (lambda () (n--2881-636-hasNum v-0 v-1 v-2 v-3 4294 4294 v-11 v-7))))))))))))
(define n--3073-817-addRowNum (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7 v-8 v-9) (let ((sc0 v-7)) (case (get-tag sc0) ((0) (let ((v-10 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-10 (vector-ref sc0 1))) (let ((v-11 (vector-ref sc0 2))) (let ((v-12 (vector-ref sc0 3))) (let ((v-13 (vector-ref sc0 4))) (Main-case--3098-844 4294 4294 v-2 v-3 v-4 v-5 4294 4294 v-12 v-13 v-9 v-8 (Prelude-C-61C-61_Eq__Int v-12 ((Prelude-fromInteger_Num__Int) 0))))))))))))
(define n--3616-1300-TwoFour (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6) (Main-case--3635-1315 v-0 v-1 v-2 v-3 v-4 v-5 v-6 (Prelude-C-62_Ord__Int (Main-arithInput v-6 ((Prelude-fromInteger_Num__Int) 10)) ((Prelude-fromInteger_Num__Int) 8)))))
(define n--3391-1079-TwoFour (lambda (v-0 v-1 v-2 v-3) (Main-case--3396-1102 v-0 v-1 v-2 v-3 (Prelude-C-62_Ord__Int v-3 ((Prelude-fromInteger_Num__Int) 8)))))
(define Main-case--3757-1700 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7 v-8) (let ((sc0 v-8)) (case (get-tag sc0) ((0) (lambda () (Main-game2048 v-0 v-1 (v-4) v-5))) ((1) (lambda () (((Main-C-62C-62C-61 4294) (Prelude-pure_Applicative__IO 4294 (Main-addNum 4294 4294 ((Main-moves v-1 v-0 (vector 3 )) v-5) (n--3616-1300-TwoFour v-0 v-1 v-2 v-3 v-4 v-5 v-2) (n--3616-1301-posAvail v-0 v-1 v-2 v-3 v-4 v-5 v-3 v-5)))) (lambda (v-9) (lambda () (((Main-C-62C-62C-61 4294) (Main-printMat 4294 4294 v-9)) (lambda (v-10) (lambda () (Main-game2048 v-0 v-1 (v-4) v-9)))))))))))))
(define Main-case--3757-1615 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7 v-8) (let ((sc0 v-8)) (case (get-tag sc0) ((0) (lambda () (Main-game2048 v-0 v-1 (v-4) v-5))) ((1) (lambda () (((Main-C-62C-62C-61 4294) (Prelude-pure_Applicative__IO 4294 (Main-addNum 4294 4294 ((Main-moves v-1 v-0 (vector 2 )) v-5) (n--3616-1300-TwoFour v-0 v-1 v-2 v-3 v-4 v-5 v-2) (n--3616-1301-posAvail v-0 v-1 v-2 v-3 v-4 v-5 v-3 v-5)))) (lambda (v-9) (lambda () (((Main-C-62C-62C-61 4294) (Main-printMat 4294 4294 v-9)) (lambda (v-10) (lambda () (Main-game2048 v-0 v-1 (v-4) v-9)))))))))))))
(define Main-case--3757-1531 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7 v-8) (let ((sc0 v-8)) (case (get-tag sc0) ((0) (lambda () (Main-game2048 v-0 v-1 (v-4) v-5))) ((1) (lambda () (((Main-C-62C-62C-61 4294) (Prelude-pure_Applicative__IO 4294 (Main-addNum 4294 4294 ((Main-moves v-1 v-0 (vector 1 )) v-5) (n--3616-1300-TwoFour v-0 v-1 v-2 v-3 v-4 v-5 v-2) (n--3616-1301-posAvail v-0 v-1 v-2 v-3 v-4 v-5 v-3 v-5)))) (lambda (v-9) (lambda () (((Main-C-62C-62C-61 4294) (Main-printMat 4294 4294 v-9)) (lambda (v-10) (lambda () (Main-game2048 v-0 v-1 (v-4) v-9)))))))))))))
(define Main-case--3757-1448 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7 v-8) (let ((sc0 v-8)) (case (get-tag sc0) ((0) (lambda () (Main-game2048 v-0 v-1 (v-4) v-5))) ((1) (lambda () (((Main-C-62C-62C-61 4294) (Prelude-pure_Applicative__IO 4294 (Main-addNum 4294 4294 ((Main-moves v-1 v-0 (vector 0 )) v-5) (n--3616-1300-TwoFour v-0 v-1 v-2 v-3 v-4 v-5 v-2) (n--3616-1301-posAvail v-0 v-1 v-2 v-3 v-4 v-5 v-3 v-5)))) (lambda (v-9) (lambda () (((Main-C-62C-62C-61 4294) (Main-printMat 4294 4294 v-9)) (lambda (v-10) (lambda () (Main-game2048 v-0 v-1 (v-4) v-9)))))))))))))
(define Main-case--3701-1419 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7) (let ((sc0 v-7)) (cond ((equal? sc0 "w") (let ((v-8 "w")) (Main-case--3757-1448 v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-8 (let ((sc1 (let ((v-9 "w")) (vector 0 4294 (lambda (v-10) (lambda (v-11) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-12) (lambda (v-13) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13))) (lambda (v-12) (lambda (v-13) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13)))) v-10 v-11))) (lambda (v-10) (lambda (v-11) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-12) (lambda (v-13) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13))) (lambda (v-12) (lambda (v-13) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13)))) v-10 v-11))))))) (case (get-tag sc1) ((0) (let ((v-9 (vector-ref sc1 1))) (let ((v-10 (vector-ref sc1 2))) (let ((v-11 (vector-ref sc1 3))) ((v-10 ((Main-moves v-1 v-0 (vector 0 )) v-5)) v-5)))))))))) ((equal? sc0 "s") (let ((v-8 "s")) (Main-case--3757-1531 v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-8 (let ((sc1 (let ((v-9 "s")) (vector 0 4294 (lambda (v-10) (lambda (v-11) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-12) (lambda (v-13) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13))) (lambda (v-12) (lambda (v-13) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13)))) v-10 v-11))) (lambda (v-10) (lambda (v-11) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-12) (lambda (v-13) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13))) (lambda (v-12) (lambda (v-13) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13)))) v-10 v-11))))))) (case (get-tag sc1) ((0) (let ((v-9 (vector-ref sc1 1))) (let ((v-10 (vector-ref sc1 2))) (let ((v-11 (vector-ref sc1 3))) ((v-10 ((Main-moves v-1 v-0 (vector 1 )) v-5)) v-5)))))))))) ((equal? sc0 "a") (let ((v-8 "a")) (Main-case--3757-1615 v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-8 (let ((sc1 (let ((v-9 "a")) (vector 0 4294 (lambda (v-10) (lambda (v-11) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-12) (lambda (v-13) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13))) (lambda (v-12) (lambda (v-13) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13)))) v-10 v-11))) (lambda (v-10) (lambda (v-11) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-12) (lambda (v-13) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13))) (lambda (v-12) (lambda (v-13) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13)))) v-10 v-11))))))) (case (get-tag sc1) ((0) (let ((v-9 (vector-ref sc1 1))) (let ((v-10 (vector-ref sc1 2))) (let ((v-11 (vector-ref sc1 3))) ((v-10 ((Main-moves v-1 v-0 (vector 2 )) v-5)) v-5)))))))))) ((equal? sc0 "d") (let ((v-8 "d")) (Main-case--3757-1700 v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-8 (let ((sc1 (let ((v-9 "d")) (vector 0 4294 (lambda (v-10) (lambda (v-11) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-12) (lambda (v-13) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13))) (lambda (v-12) (lambda (v-13) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13)))) v-10 v-11))) (lambda (v-10) (lambda (v-11) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-12) (lambda (v-13) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13))) (lambda (v-12) (lambda (v-13) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15)))) v-12 v-13)))) v-10 v-11))))))) (case (get-tag sc1) ((0) (let ((v-9 (vector-ref sc1 1))) (let ((v-10 (vector-ref sc1 2))) (let ((v-11 (vector-ref sc1 3))) ((v-10 ((Main-moves v-1 v-0 (vector 3 )) v-5)) v-5))))))))))(else (lambda () (((Main-C-62C-62C-61 4294) (PrimIO-putStrLn "The right operation is 'wasd'! ")) (lambda (v-8) (lambda () (Main-game2048 v-0 v-1 (v-4) v-5))))))))))
(define Main-case--3616-1361 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6) (let ((sc0 v-6)) (case (get-tag sc0) ((0) (((Main-C-62C-62C-61 4294) (PrimIO-putStrLn "Congratulations! You win the game!")) (lambda (v-7) (lambda () (vector 0 ))))) ((1) (((Main-C-62C-62C-61 4294) (PrimIO-putStrLn "Sorry! You lose the game!")) (lambda (v-7) (lambda () (vector 0 ))))) ((2) (((Main-C-62C-62C-61 4294) (PrimIO-putStrLn "The game continues!")) (lambda (v-7) (lambda () (((Main-C-62C-62C-61 4294) (PrimIO-getLine)) (lambda (v-8) (Main-case--3701-1419 v-0 v-1 v-2 v-3 v-4 v-5 v-7 v-8)))))))))))
(define Main-case--3635-1315 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7) (let ((sc0 v-7)) (case (get-tag sc0) ((0) ((Prelude-fromInteger_Num__Int) 4)) ((1) ((Prelude-fromInteger_Num__Int) 2))))))
(define Main-case--3396-1102 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) ((Prelude-fromInteger_Num__Int) 4)) ((1) ((Prelude-fromInteger_Num__Int) 2))))))
(define Main-case--3073-999 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7) (let ((sc0 v-7)) (case (get-tag sc0) ((0) (Vect-Data-C-43C-43 4294 4294 4294 (vector 1 4294 4294 v-2 (vector 0 4294)) (Main-addNum 4294 4294 v-3 v-5 (((Prelude-C-45_Neg__Int) v-4) (Main-countRowZero 4294 v-2))))) ((1) (vector 1 4294 4294 (n--3073-817-addRowNum 4294 4294 v-2 v-3 v-4 v-5 4294 v-2 v-5 v-4) v-3))))))
(define Main-case--3126-879 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7 v-8 v-9 v-10 v-11 v-12) (let ((sc0 v-12)) (case (get-tag sc0) ((0) (Vect-Data-C-43C-43 4294 4294 4294 (vector 1 4294 4294 v-8 (vector 0 4294)) (n--3073-817-addRowNum 4294 4294 v-2 v-3 v-4 v-5 4294 v-9 v-11 (((Prelude-C-45_Neg__Int) v-10) ((Prelude-fromInteger_Num__Int) 1))))) ((1) (Vect-Data-C-43C-43 4294 4294 4294 (vector 1 4294 4294 v-11 (vector 0 4294)) v-9))))))
(define Main-case--3098-844 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7 v-8 v-9 v-10 v-11 v-12) (let ((sc0 v-12)) (case (get-tag sc0) ((0) (Main-case--3126-879 4294 4294 v-2 v-3 v-4 v-5 4294 4294 v-8 v-9 v-10 v-11 (Prelude-C-62_Ord__Int v-10 ((Prelude-fromInteger_Num__Int) 1)))) ((1) (Vect-Data-C-43C-43 4294 4294 4294 (vector 1 4294 4294 v-8 (vector 0 4294)) (n--3073-817-addRowNum 4294 4294 v-2 v-3 v-4 v-5 4294 v-9 v-11 v-10)))))))
(define Main-case--2994-752 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) ((Prelude-fromInteger_Num__Int) 1)) ((1) ((Prelude-fromInteger_Num__Int) 0))))))
(define Main-case--2940-708 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((1) (vector 1 )) ((0) (vector 2 ))))))
(define Main-case--2881-680 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (vector 0 )) ((1) (Main-case--2940-708 v-0 v-1 v-2 v-3 (Prelude-C-124C-124 (Main-movePossible v-0 v-1 v-3) (lambda () (n--2881-636-hasNum v-0 v-1 v-2 v-3 4294 4294 v-3 ((Prelude-fromInteger_Num__Int) 0))))))))))
(define Main-case--2544-412 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7 v-8 v-9) (let ((sc0 v-9)) (case (get-tag sc0) ((0) (Vect-Data-C-43C-43 4294 4294 4294 (vector 1 4294 4294 (((Prelude-C-43_Num__Int) v-6) v-7) (vector 1 4294 4294 ((Prelude-fromInteger_Num__Int) 0) (vector 0 4294))) (n--2523-299-myMerge v-0 4294 v-2 v-3 v-5 v-8))) ((1) (vector 1 4294 4294 v-6 (n--2523-299-myMerge v-0 4294 v-2 v-3 (+ 1 v-5) (vector 1 4294 4294 v-7 v-8))))))))
(define Main-case--2543-321 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7 v-8) (let ((sc0 v-8)) (case (get-tag sc0) ((0) (let ((v-9 (Vect-Data-C-43C-43 4294 4294 4294 (n--2523-298-myTighten v-0 4294 v-2 v-3 v-5 v-7) (vector 1 4294 4294 ((Prelude-fromInteger_Num__Int) 0) (vector 0 4294))))) v-9)) ((1) (vector 1 4294 4294 v-6 (n--2523-298-myTighten v-0 4294 v-2 v-3 v-5 v-7)))))))
(define Main-n-1813 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (+ 1 (- 4 ((Prelude-fromInteger_Num__Integer) 1))))))))
(define Main-m-1812 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (+ 1 (- 4 ((Prelude-fromInteger_Num__Integer) 1))))))))
(define Main-_-1807 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-1799) v-0) v-1) (vector 110 (((Main-m-1800) v-0) v-1) (vector 3 )))))))
(define Main-__con-1804 (lambda () (lambda (v-0) (lambda (v-1) (vector 0 4294 (lambda (v-2) (lambda (v-3) (((Prelude-C-43_Num__Nat) v-2) v-3))) (lambda (v-2) (lambda (v-3) (((Prelude-C-42_Num__Nat) v-2) v-3))) (lambda (v-2) (Prelude-fromInteger_Num__Nat v-2)))))))
(define Main-ty-1803 (lambda () (lambda (v-0) (lambda (v-1) (vector 105 )))))
(define Main-__con-1802 (lambda () (lambda (v-0) (lambda (v-1) (vector 0 4294 (lambda (v-2) (lambda (v-3) (((Prelude-C-43_Num__Nat) v-2) v-3))) (lambda (v-2) (lambda (v-3) (((Prelude-C-42_Num__Nat) v-2) v-3))) (lambda (v-2) (Prelude-fromInteger_Num__Nat v-2)))))))
(define Main-ty-1801 (lambda () (lambda (v-0) (lambda (v-1) (vector 105 )))))
(define Main-m-1800 (lambda () (lambda (v-0) (lambda (v-1) (let ((sc0 (((Main-__con-1802) v-0) v-1))) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (v-5 4))))))))))))
(define Main-n-1799 (lambda () (lambda (v-0) (lambda (v-1) (let ((sc0 (((Main-__con-1804) v-0) v-1))) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (v-5 4))))))))))))
(define Main-a-1795 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-1799) v-0) v-1) (vector 110 (((Main-m-1800) v-0) v-1) (vector 3 )))))))
(define Main-a-1792 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-1799) v-0) v-1) (vector 110 (((Main-m-1800) v-0) v-1) (vector 3 )))))))
(define Main-_-1790 (lambda () (lambda (v-0) ((Main-a-1785) v-0))))
(define Main-a-1785 (lambda () (lambda (v-0) (vector 108 ))))
(define Main-_-1783 (lambda () (Main-a-1779)))
(define Main-a-1779 (lambda () (vector 4 )))
(define Main-sa-1691 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-1 (vector 3 )))))))))))
(define Main-ty-1686 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-0 (vector 110 v-1 (vector 3 ))))))))))))
(define Main-sa-1606 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-1 (vector 3 )))))))))))
(define Main-ty-1601 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-0 (vector 110 v-1 (vector 3 ))))))))))))
(define Main-sa-1523 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-1 (vector 3 )))))))))))
(define Main-ty-1518 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-0 (vector 110 v-1 (vector 3 ))))))))))))
(define Main-sa-1440 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-1 (vector 3 )))))))))))
(define Main-ty-1435 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-0 (vector 110 v-1 (vector 3 ))))))))))))
(define Main-sa-1177 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 1 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- 4 ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223))))) (vector 1 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- (- 4 ((Prelude-fromInteger_Num__Integer) 1)) ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223)))) ((Prelude-fromInteger_Num__Int) 1013904223))))) (vector 1 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- (- (- 4 ((Prelude-fromInteger_Num__Integer) 1)) ((Prelude-fromInteger_Num__Integer) 1)) ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223)))) ((Prelude-fromInteger_Num__Int) 1013904223)))) ((Prelude-fromInteger_Num__Int) 1013904223))))) (vector 0 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- (- (- (- 4 ((Prelude-fromInteger_Num__Integer) 1)) ((Prelude-fromInteger_Num__Integer) 1)) ((Prelude-fromInteger_Num__Integer) 1)) ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223)))) ((Prelude-fromInteger_Num__Int) 1013904223)))) ((Prelude-fromInteger_Num__Int) 1013904223)))) ((Prelude-fromInteger_Num__Int) 1013904223)))))))))))))))
(define Main-sa-1176 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 111 (((((Main-len-1173) v-0) v-1) v-2) v-3))))))))
(define Main-len-1173 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (+ 1 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- 4 ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223))))))))))))
(define Main-sa-1166 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 1 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- 4 ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223))))) (vector 1 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- (- 4 ((Prelude-fromInteger_Num__Integer) 1)) ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223)))) ((Prelude-fromInteger_Num__Int) 1013904223))))) (vector 0 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- (- (- 4 ((Prelude-fromInteger_Num__Integer) 1)) ((Prelude-fromInteger_Num__Integer) 1)) ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223)))) ((Prelude-fromInteger_Num__Int) 1013904223)))) ((Prelude-fromInteger_Num__Int) 1013904223))))))))))))))
(define Main-sa-1165 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 111 (((((Main-len-1162) v-0) v-1) v-2) v-3))))))))
(define Main-len-1162 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (+ 1 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- 4 ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223))))))))))))
(define Main-sa-1158 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 1 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- 4 ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223))))) (vector 0 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- (- 4 ((Prelude-fromInteger_Num__Integer) 1)) ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223)))) ((Prelude-fromInteger_Num__Int) 1013904223)))))))))))))
(define Main-sa-1157 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 111 (((((Main-len-1154) v-0) v-1) v-2) v-3))))))))
(define Main-len-1154 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (+ 1 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- 4 ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223))))))))))))
(define Main-sa-1149 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 0 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- 4 ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223))))))))))))
(define Main-sa-1148 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 111 (((((Main-len-1145) v-0) v-1) v-2) v-3))))))))
(define Main-len-1145 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (+ 1 (List-Data-length (vector 3 ) (Prelude-take (vector 3 ) (- 4 ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-2)) ((Prelude-fromInteger_Num__Int) 1013904223))))))))))))
(define Main-__con-1143 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 0 4294 (lambda (v-3) (lambda (v-4) (((Prelude-C-43_Num__Nat) v-3) v-4))) (lambda (v-3) (lambda (v-4) (((Prelude-C-42_Num__Nat) v-3) v-4))) (lambda (v-3) (Prelude-fromInteger_Num__Nat v-3))))))))
(define Main-ty-1142 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 105 ))))))
(define Main-n-1141 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (let ((sc0 ((((Main-__con-1143) v-0) v-1) v-2))) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) (v-6 4)))))))))))))
(define Main-a-1140 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 3 ))))))
(define Main-l-1139 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (Prelude-take ((((Main-a-1140) v-0) v-1) v-2) ((((Main-n-1141) v-0) v-1) v-2) (Main-randoms v-2)))))))
(define Main-elem-1138 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 3 ))))))
(define Main-_-1137 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 110 (List-Data-length ((((Main-elem-1138) v-0) v-1) v-2) ((((Main-l-1139) v-0) v-1) v-2)) ((((Main-elem-1138) v-0) v-1) v-2)))))))
(define Main-elem-1086 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (vector 110 ((((((((((Main-m-1081) v-0) v-1) v-2) v-3) v-4) v-5) v-6) v-7) v-8) (vector 3 )))))))))))))
(define Main-m-1081 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) v-7)))))))))))
(define Main-elem-1046 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-0 (vector 3 )))))))))))
(define Main-elem-1029 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-0 (vector 3 )))))))))))
(define Main-elem-1026 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-0 (vector 3 )))))))))))
(define Main-len-1025 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) 0)))))))))
(define Main-m-1017 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (+ 1 ((((((((Main-len-1025) v-0) v-1) v-2) v-3) v-4) v-5) v-6)))))))))))
(define Main-elem-1016 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-0 (vector 3 )))))))))))
(define Main-len-987 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (lambda (v-9) (lambda (v-10) (lambda (v-11) 0))))))))))))))
(define Main-m-983 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (lambda (v-9) (lambda (v-10) (lambda (v-11) (+ 1 (((((((((((((Main-len-987) v-0) v-1) v-2) v-3) v-4) v-5) v-6) v-7) v-8) v-9) v-10) v-11))))))))))))))))
(define Main-len-951 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (lambda (v-9) (lambda (v-10) (lambda (v-11) 0))))))))))))))
(define Main-m-948 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (lambda (v-9) (lambda (v-10) (lambda (v-11) (+ 1 (((((((((((((Main-len-951) v-0) v-1) v-2) v-3) v-4) v-5) v-6) v-7) v-8) v-9) v-10) v-11))))))))))))))))
(define Main-len-916 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (lambda (v-9) (lambda (v-10) (lambda (v-11) 0))))))))))))))
(define Main-m-907 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (lambda (v-9) (lambda (v-10) (lambda (v-11) (+ 1 (((((((((((((Main-len-916) v-0) v-1) v-2) v-3) v-4) v-5) v-6) v-7) v-8) v-9) v-10) v-11))))))))))))))))
(define Main-elem-808 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 110 v-0 (vector 3 )))))))
(define Main-sa-583 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 110 v-0 (vector 3 )))))))
(define Main-ty-578 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 110 v-1 (vector 110 v-0 (vector 3 ))))))))
(define Main-n-567 (lambda () (lambda (v-0) (lambda (v-1) (((Main-n-562) v-0) v-1)))))
(define Main-m-566 (lambda () (lambda (v-0) (lambda (v-1) (((Main-m-561) v-0) v-1)))))
(define Main-elem-565 (lambda () (lambda (v-0) (lambda (v-1) (vector 3 )))))
(define Main-n-562 (lambda () (lambda (v-0) (lambda (v-1) (((Main-m-555) v-0) v-1)))))
(define Main-m-561 (lambda () (lambda (v-0) (lambda (v-1) (((Main-n-556) v-0) v-1)))))
(define Main-b-560 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-562) v-0) v-1) (vector 110 (((Main-m-561) v-0) v-1) (vector 3 )))))))
(define Main-c-559 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-562) v-0) v-1) (vector 110 (((Main-m-561) v-0) v-1) (vector 3 )))))))
(define Main-a-558 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-m-566) v-0) v-1) (vector 110 (((Main-n-567) v-0) v-1) (((Main-elem-565) v-0) v-1)))))))
(define Main-n-556 (lambda () (lambda (v-0) (lambda (v-1) v-1))))
(define Main-m-555 (lambda () (lambda (v-0) (lambda (v-1) v-0))))
(define Main-elem-554 (lambda () (lambda (v-0) (lambda (v-1) (vector 3 )))))
(define Main-b-553 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-m-555) v-0) v-1) (vector 110 (((Main-n-556) v-0) v-1) (((Main-elem-554) v-0) v-1)))))))
(define Main-c-552 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-556) v-0) v-1) (vector 110 (((Main-m-555) v-0) v-1) (((Main-elem-554) v-0) v-1)))))))
(define Main-a-551 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-m-561) v-0) v-1) (vector 110 (((Main-n-562) v-0) v-1) (vector 3 )))))))
(define Main-n-542 (lambda () (lambda (v-0) (lambda (v-1) (((Main-n-537) v-0) v-1)))))
(define Main-m-541 (lambda () (lambda (v-0) (lambda (v-1) (((Main-m-538) v-0) v-1)))))
(define Main-elem-540 (lambda () (lambda (v-0) (lambda (v-1) (vector 3 )))))
(define Main-m-538 (lambda () (lambda (v-0) (lambda (v-1) (((Main-n-532) v-0) v-1)))))
(define Main-n-537 (lambda () (lambda (v-0) (lambda (v-1) (((Main-m-531) v-0) v-1)))))
(define Main-b-536 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-537) v-0) v-1) (vector 110 (((Main-m-538) v-0) v-1) (vector 3 )))))))
(define Main-c-535 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-537) v-0) v-1) (vector 110 (((Main-m-538) v-0) v-1) (vector 3 )))))))
(define Main-a-534 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-m-541) v-0) v-1) (vector 110 (((Main-n-542) v-0) v-1) (((Main-elem-540) v-0) v-1)))))))
(define Main-n-532 (lambda () (lambda (v-0) (lambda (v-1) v-1))))
(define Main-m-531 (lambda () (lambda (v-0) (lambda (v-1) v-0))))
(define Main-elem-530 (lambda () (lambda (v-0) (lambda (v-1) (vector 3 )))))
(define Main-b-529 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-m-531) v-0) v-1) (vector 110 (((Main-n-532) v-0) v-1) (((Main-elem-530) v-0) v-1)))))))
(define Main-c-528 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-532) v-0) v-1) (vector 110 (((Main-m-531) v-0) v-1) (((Main-elem-530) v-0) v-1)))))))
(define Main-a-527 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-m-538) v-0) v-1) (vector 110 (((Main-n-537) v-0) v-1) (vector 3 )))))))
(define Main-n-518 (lambda () (lambda (v-0) (lambda (v-1) (((Main-n-513) v-0) v-1)))))
(define Main-m-517 (lambda () (lambda (v-0) (lambda (v-1) (((Main-m-514) v-0) v-1)))))
(define Main-elem-516 (lambda () (lambda (v-0) (lambda (v-1) (vector 3 )))))
(define Main-m-514 (lambda () (lambda (v-0) (lambda (v-1) (((Main-m-507) v-0) v-1)))))
(define Main-n-513 (lambda () (lambda (v-0) (lambda (v-1) (((Main-n-508) v-0) v-1)))))
(define Main-b-512 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-513) v-0) v-1) (vector 110 (((Main-m-514) v-0) v-1) (vector 3 )))))))
(define Main-c-511 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-513) v-0) v-1) (vector 110 (((Main-m-514) v-0) v-1) (vector 3 )))))))
(define Main-a-510 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-518) v-0) v-1) (vector 110 (((Main-m-517) v-0) v-1) (((Main-elem-516) v-0) v-1)))))))
(define Main-n-508 (lambda () (lambda (v-0) (lambda (v-1) v-1))))
(define Main-m-507 (lambda () (lambda (v-0) (lambda (v-1) v-0))))
(define Main-elem-506 (lambda () (lambda (v-0) (lambda (v-1) (vector 3 )))))
(define Main-b-505 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-508) v-0) v-1) (vector 110 (((Main-m-507) v-0) v-1) (((Main-elem-506) v-0) v-1)))))))
(define Main-c-504 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-508) v-0) v-1) (vector 110 (((Main-m-507) v-0) v-1) (((Main-elem-506) v-0) v-1)))))))
(define Main-a-503 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 (((Main-n-513) v-0) v-1) (vector 110 (((Main-m-514) v-0) v-1) (vector 3 )))))))
(define Main-elem-479 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 110 v-0 (vector 3 ))))))))
(define Main-len-470 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (+ 1 v-5))))))))))))
(define Main-len-442 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) 0)))))))))))
(define Main-len-438 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (+ 1 ((((((((((Main-len-442) v-0) v-1) v-2) v-3) v-4) v-5) v-6) v-7) v-8)))))))))))))
(define Main-m-434 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (+ 1 ((((((((((Main-len-438) v-0) v-1) v-2) v-3) v-4) v-5) v-6) v-7) v-8)))))))))))))
(define Main-y-360 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (+ v-5 ((((((((((Main-left-352) v-0) v-1) v-2) v-3) v-4) v-5) v-6) v-7) v-8)))))))))))))
(define Main-x-359 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (+ 1 (+ (- 1 ((Prelude-fromInteger_Num__Integer) 1)) v-5)))))))))))))
(define Main-__con-354 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (vector 0 4294 (lambda (v-9) (lambda (v-10) (((Prelude-C-43_Num__Nat) v-9) v-10))) (lambda (v-9) (lambda (v-10) (((Prelude-C-42_Num__Nat) v-9) v-10))) (lambda (v-9) (Prelude-fromInteger_Num__Nat v-9))))))))))))))
(define Main-ty-353 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (vector 105 ))))))))))))
(define Main-left-352 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (let ((sc0 ((((((((((Main-__con-354) v-0) v-1) v-2) v-3) v-4) v-5) v-6) v-7) v-8))) (case (get-tag sc0) ((0) (let ((v-9 (vector-ref sc0 1))) (let ((v-10 (vector-ref sc0 2))) (let ((v-11 (vector-ref sc0 3))) (let ((v-12 (vector-ref sc0 4))) (v-12 1)))))))))))))))))))
(define Main-len-345 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) 0))))))))))
(define Main-n-340 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (+ 1 (((((((((Main-len-345) v-0) v-1) v-2) v-3) v-4) v-5) v-6) v-7))))))))))))
(define Main-_-339 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (vector 110 (((Prelude-C-43_Num__Nat) v-5) (((((((((Main-n-340) v-0) v-1) v-2) v-3) v-4) v-5) v-6) v-7)) (vector 3 ))))))))))))
(define Main-elem-289 (lambda () (lambda (v-0) (vector 110 v-0 (vector 3 )))))
(define Main-elem-275 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 110 v-1 v-0))))))))
(define Main-elem-263 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 v-1 v-0)))))
(define Main-f-243 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-1 v-6))))))))))
(define Main-a-242 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (vector 110 (+ 1 v-2) v-0)))))))))
(define Main-f-232 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-1 v-6))))))))))
(define Main-a-231 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (vector 110 (+ 1 v-2) v-0)))))))))
(define Main-b-230 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (vector 110 (((((((Main-len-220) v-0) v-1) v-2) v-3) v-4) v-5) (((((((Main-elem-223) v-0) v-1) v-2) v-3) v-4) v-5))))))))))
(define Main-elem-228 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (vector 110 (((((((Main-len-220) v-0) v-1) v-2) v-3) v-4) v-5) (((((((Main-elem-223) v-0) v-1) v-2) v-3) v-4) v-5))))))))))
(define Main-len-227 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) v-1))))))))
(define Main-m-224 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (+ 1 (((((((Main-len-227) v-0) v-1) v-2) v-3) v-4) v-5))))))))))
(define Main-elem-223 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) v-0))))))))
(define Main-elem-221 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (vector 110 (((((((Main-m-224) v-0) v-1) v-2) v-3) v-4) v-5) (((((((Main-elem-223) v-0) v-1) v-2) v-3) v-4) v-5))))))))))
(define Main-len-220 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) v-2))))))))
(define Main-elem-206 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 110 (+ 1 v-1) v-0))))))
(define Main-elem-190 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 0 v-0)))))
(define Main-transposeMat (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (Vect-Data-replicate 4294 v-2 (vector 0 4294))))(else (let ((sc0 v-2)) (cond ((equal? sc0 0) (let ((sc1 v-3)) (case (get-tag sc1) ((1) (let ((v-4 (vector-ref sc1 1))) (let ((v-5 (vector-ref sc1 2))) (let ((v-6 (vector-ref sc1 3))) (let ((v-7 (vector-ref sc1 4))) (let ((sc2 v-6)) (case (get-tag sc2) ((0) (let ((v-8 (vector-ref sc2 1))) (vector 0 4294)))))))))))))(else (let ((v-4 (- v-2 1))) (let ((sc0 v-3)) (case (get-tag sc0) ((1) (let ((v-5 (vector-ref sc0 1))) (let ((v-6 (vector-ref sc0 2))) (let ((v-7 (vector-ref sc0 3))) (let ((v-8 (vector-ref sc0 4))) (let ((sc1 v-7)) (case (get-tag sc1) ((1) (let ((v-9 (vector-ref sc1 1))) (let ((v-10 (vector-ref sc1 2))) (let ((v-11 (vector-ref sc1 3))) (let ((v-12 (vector-ref sc1 4))) (vector 1 4294 4294 (vector 1 4294 4294 v-11 (let ((sc2 (let ((v-13 (+ 1 v-4))) (vector 0 4294 (lambda (v-14) (lambda (v-15) (lambda (v-16) (lambda (v-17) (Vect-Data-map_Functor__C-40VectC-32C-36nC-41 4294 4294 4294 v-16 v-17))))))))) (case (get-tag sc2) ((0) (let ((v-13 (vector-ref sc2 1))) (let ((v-14 (vector-ref sc2 2))) ((((v-14 4294) 4294) (let ((v-15 (+ 1 v-4))) (lambda (v-16) (Vect-Data-head 4294 4294 v-16)))) v-8))))))) (Main-transposeMat 4294 4294 v-4 (vector 1 4294 4294 v-12 (let ((sc2 (let ((v-13 (+ 1 v-4))) (vector 0 4294 (lambda (v-14) (lambda (v-15) (lambda (v-16) (lambda (v-17) (Vect-Data-map_Functor__C-40VectC-32C-36nC-41 4294 4294 4294 v-16 v-17))))))))) (case (get-tag sc2) ((0) (let ((v-13 (vector-ref sc2 1))) (let ((v-14 (vector-ref sc2 2))) ((((v-14 4294) 4294) (let ((v-15 (+ 1 v-4))) (lambda (v-16) (Vect-Data-tail 4294 4294 v-16)))) v-8))))))))))))))))))))))))))))))))
(define Main-run (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (Prelude-pure_Applicative__IO 4294 (vector 0 )))(else (let ((sc0 v-0)) (case (get-tag sc0) ((1) (let ((v-2 (vector-ref sc0 1))) (let ((sc1 v-1)) (case (get-tag sc1) ((1) (let ((v-3 (vector-ref sc1 1))) (let ((v-4 (vector-ref sc1 2))) (let ((v-5 (vector-ref sc1 3))) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 v-4 (lambda (v-6) (Main-run (v-2) ((v-5 v-6))))))))))))) ((0) (Prelude-pure_Applicative__IO 4294 (vector 0 ))))))))))
(define Main-reverseMat (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (let ((v-7 (vector-ref sc0 4))) (vector 1 4294 4294 (Vect-Data-reverse 4294 4294 v-6) (Main-reverseMat 4294 4294 4294 v-7)))))))))))
(define Main-randoms (lambda (v-0) (let ((v-1 (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-0)) ((Prelude-fromInteger_Num__Int) 1013904223)))) (vector 0 4294 (Prelude-abs_Abs__Int (((Prelude-shiftR) v-1) ((Prelude-fromInteger_Num__Int) 2))) (lambda () (Main-randoms v-1))))))
(define Main-printMat (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (PrimIO-putStrLn " "))) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 (n--3520-1205-printRow 4294 4294 v-5 v-6 4294 v-5) (lambda (v-7) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 (PrimIO-putStrLn "") (lambda (v-8) (Main-printMat 4294 4294 v-6))))))))))))))
(define Main-moves (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((2) (lambda (v-3) (Main-moveLeft 4294 v-0 v-3))) ((3) (lambda (v-3) (Main-reverseMat 4294 4294 4294 (Main-moveLeft 4294 v-0 (Main-reverseMat 4294 4294 4294 v-3))))) ((0) (lambda (v-3) (Main-transposeMat 4294 4294 v-1 (Main-moveLeft 4294 v-1 (Main-transposeMat 4294 4294 v-0 v-3))))) ((1) (lambda (v-3) (Main-transposeMat 4294 4294 v-1 ((Main-moves v-1 v-0 (vector 3 )) (Main-transposeMat 4294 4294 v-0 v-3)))))))))
(define Main-movePossible (lambda (v-0 v-1 v-2) (Prelude-C-124C-124 (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-3) (lambda (v-4) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-5) (lambda (v-6) (Prelude-C-61C-61_Eq__Int v-5 v-6))) (lambda (v-5) (lambda (v-6) (Prelude-C-47C-61_Eq__Int v-5 v-6)))) v-3 v-4))) (lambda (v-3) (lambda (v-4) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-5) (lambda (v-6) (Prelude-C-61C-61_Eq__Int v-5 v-6))) (lambda (v-5) (lambda (v-6) (Prelude-C-47C-61_Eq__Int v-5 v-6)))) v-3 v-4)))) ((Main-moves v-0 v-1 (vector 2 )) v-2) v-2) (lambda () (Prelude-C-124C-124 (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-3) (lambda (v-4) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-5) (lambda (v-6) (Prelude-C-61C-61_Eq__Int v-5 v-6))) (lambda (v-5) (lambda (v-6) (Prelude-C-47C-61_Eq__Int v-5 v-6)))) v-3 v-4))) (lambda (v-3) (lambda (v-4) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-5) (lambda (v-6) (Prelude-C-61C-61_Eq__Int v-5 v-6))) (lambda (v-5) (lambda (v-6) (Prelude-C-47C-61_Eq__Int v-5 v-6)))) v-3 v-4)))) ((Main-moves v-0 v-1 (vector 3 )) v-2) v-2) (lambda () (Prelude-C-124C-124 (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-3) (lambda (v-4) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-5) (lambda (v-6) (Prelude-C-61C-61_Eq__Int v-5 v-6))) (lambda (v-5) (lambda (v-6) (Prelude-C-47C-61_Eq__Int v-5 v-6)))) v-3 v-4))) (lambda (v-3) (lambda (v-4) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-5) (lambda (v-6) (Prelude-C-61C-61_Eq__Int v-5 v-6))) (lambda (v-5) (lambda (v-6) (Prelude-C-47C-61_Eq__Int v-5 v-6)))) v-3 v-4)))) ((Main-moves v-0 v-1 (vector 0 )) v-2) v-2) (lambda () (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-3) (lambda (v-4) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-5) (lambda (v-6) (Prelude-C-61C-61_Eq__Int v-5 v-6))) (lambda (v-5) (lambda (v-6) (Prelude-C-47C-61_Eq__Int v-5 v-6)))) v-3 v-4))) (lambda (v-3) (lambda (v-4) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 (vector 0 4294 (lambda (v-5) (lambda (v-6) (Prelude-C-61C-61_Eq__Int v-5 v-6))) (lambda (v-5) (lambda (v-6) (Prelude-C-47C-61_Eq__Int v-5 v-6)))) v-3 v-4)))) ((Main-moves v-0 v-1 (vector 1 )) v-2) v-2)))))))))
(define Main-moveLeft (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) (vector 1 4294 4294 (n--2523-298-myTighten v-1 4294 v-5 v-6 v-1 (n--2523-299-myMerge v-1 4294 v-5 v-6 v-1 (n--2523-298-myTighten v-1 4294 v-5 v-6 v-1 v-5))) (Main-moveLeft 4294 v-1 v-6)))))))))))
(define Main-main (lambda () (Prelude-C-62C-62C-61_Monad__IO 4294 4294 (System-time) (lambda (v-0) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 (PrimIO-putStrLn "Welcome to 2048 game!") (lambda (v-1) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 (Prelude-pure_Applicative__IO 4294 (Main-initMat ((Prelude-fromInteger_Num__Int) v-0) (Prelude-fromInteger_Num__Nat 4) (Prelude-fromInteger_Num__Nat 4))) (lambda (v-2) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 (Main-printMat 4294 4294 v-2) (lambda (v-3) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 (System-usleep ((Prelude-fromInteger_Num__Int) 1000000) (vector 0 )) (lambda (v-4) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 (System-time) (lambda (v-5) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 (Main-run (Main-forever) (Main-game2048 (+ 1 (- 4 ((Prelude-fromInteger_Num__Integer) 1))) (+ 1 (- 4 ((Prelude-fromInteger_Num__Integer) 1))) (Main-randoms ((Prelude-fromInteger_Num__Int) v-5)) v-2)) (lambda (v-6) (PrimIO-putStrLn "Game end")))))))))))))))))
(define Main-initMat (lambda (v-0 v-1 v-2) (let ((v-3 (Vect-Data-fromList 4294 (Prelude-take 4294 (Prelude-fromInteger_Num__Nat 4) (Main-randoms v-0))))) (n--3391-1078-initHelper v-2 v-1 v-0 v-1 v-2 (n--3391-1079-TwoFour v-2 v-1 v-0 (Main-arithInput (Vect-Data-index 4294 4294 (Fin-Data-fromInteger 0 (+ 1 (List-Data-length 4294 (Prelude-take 4294 (- 4 ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-0)) ((Prelude-fromInteger_Num__Int) 1013904223)))))) (vector 0 4294 4294)) v-3) ((Prelude-fromInteger_Num__Int) 10))) (Main-arithInput (Vect-Data-index 4294 4294 (Fin-Data-fromInteger 1 (+ 1 (List-Data-length 4294 (Prelude-take 4294 (- 4 ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-0)) ((Prelude-fromInteger_Num__Int) 1013904223)))))) (vector 0 4294 4294)) v-3) (((Prelude-C-42_Num__Int) (n--3391-1080-natToInt v-2 v-1 v-0 v-2)) (n--3391-1080-natToInt v-2 v-1 v-0 v-1))) (n--3391-1079-TwoFour v-2 v-1 v-0 (Main-arithInput (Vect-Data-index 4294 4294 (Fin-Data-fromInteger 2 (+ 1 (List-Data-length 4294 (Prelude-take 4294 (- 4 ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-0)) ((Prelude-fromInteger_Num__Int) 1013904223)))))) (vector 0 4294 4294)) v-3) ((Prelude-fromInteger_Num__Int) 10))) (((Prelude-C-45_Neg__Int) (Main-arithInput (Vect-Data-index 4294 4294 (Fin-Data-fromInteger 3 (+ 1 (List-Data-length 4294 (Prelude-take 4294 (- 4 ((Prelude-fromInteger_Num__Integer) 1)) (Main-randoms (((Prelude-C-43_Num__Int) (((Prelude-C-42_Num__Int) ((Prelude-fromInteger_Num__Int) 1664525)) v-0)) ((Prelude-fromInteger_Num__Int) 1013904223)))))) (vector 0 4294 4294)) v-3) (((Prelude-C-42_Num__Int) (n--3391-1080-natToInt v-2 v-1 v-0 v-2)) (n--3391-1080-natToInt v-2 v-1 v-0 v-1)))) ((Prelude-fromInteger_Num__Int) 1))))))
(define Main-gameWinOver (lambda (v-0 v-1 v-2 v-3) (Main-case--2881-680 v-0 v-1 v-3 v-2 (n--2881-636-hasNum v-0 v-1 v-3 v-2 4294 4294 v-2 v-3))))
(define Main-game2048 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (let ((v-7 (v-6))) (let ((v-8 4294)) (let ((sc1 v-7)) (case (get-tag sc1) ((0) (let ((v-9 (vector-ref sc1 1))) (let ((v-10 (vector-ref sc1 2))) (let ((v-11 (vector-ref sc1 3))) (Main-case--3616-1361 v-0 v-1 v-5 v-10 v-11 v-3 (Main-gameWinOver v-1 v-0 v-3 ((Prelude-fromInteger_Num__Int) 2048)))))))))))))))))))
(define Main-forever (lambda () (vector 1 (lambda () (Main-forever)))))
(define Main-countZero (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) ((Prelude-fromInteger_Num__Int) 0))) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) (((Prelude-C-43_Num__Int) (Main-countRowZero 4294 v-5)) (Main-countZero 4294 4294 v-6)))))))))))
(define Main-countRowZero (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) ((Prelude-fromInteger_Num__Int) 0))) ((1) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (((Prelude-C-43_Num__Int) (Main-countRowZero 4294 v-5)) (Main-case--2994-752 4294 v-4 v-5 4294 (Prelude-C-61C-61_Eq__Int v-4 ((Prelude-fromInteger_Num__Int) 0)))))))))))))
(define Main-arithInput (lambda (v-0 v-1) (((Prelude-C-43_Num__Int) (Prelude-mod_Integral__Int v-0 v-1)) ((Prelude-fromInteger_Num__Int) 1))))
(define Main-addNum (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-5 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-5 (vector-ref sc0 1))) (let ((v-6 (vector-ref sc0 2))) (let ((v-7 (vector-ref sc0 3))) (let ((v-8 (vector-ref sc0 4))) (Main-case--3073-999 4294 4294 v-7 v-8 v-4 v-3 4294 (Prelude-C-60_Ord__Int (Main-countRowZero 4294 v-7) v-4)))))))))))
(define Main-C-62C-62C-61 (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 1 4294 v-1 v-2)))))
(define System-usleep (lambda (v-0 v-1) (vector 0 4294 (lambda (v-2) (vector 0 #f (apply blodwen-usleep (blodwen-read-args (vector 1 (vector 3 ) v-0 (vector 0 )))) #f)))))
(define System-time (lambda () (vector 0 4294 (lambda (v-0) (vector 0 #f (apply blodwen-time (blodwen-read-args (vector 0 ))) #f)))))
(define Prelude-case--5379-6088 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--5380-6074 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--3251-3703 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--3252-3689 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--3176-3576 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) 0) ((1) (+ 1 (- v-0 ((Prelude-fromInteger_Num__Integer) 1))))))))
(define Prelude-case--2237-2495 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((1) (remainder v-1 v-0))))))
(define Prelude-case--2236-2481 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((1) (b/ v-1 v-0 63))))))
(define Prelude-case--2212-2449 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (Prelude-negate_Neg__Int v-0)) ((1) v-0)))))
(define Prelude-case--1217-1436 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (vector 1 )) ((1) (vector 2 ))))))
(define Prelude-case--1152-1419 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (vector 0 )) ((1) (Prelude-case--1217-1436 v-0 v-1 (Prelude-C-61C-61_Eq__Integer v-1 v-0)))))))
(define Prelude-case--1157-1402 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--1158-1388 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--1112-1329 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (vector 1 )) ((1) (vector 2 ))))))
(define Prelude-case--1047-1312 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (vector 0 )) ((1) (Prelude-case--1112-1329 v-0 v-1 (Prelude-C-61C-61_Eq__Int v-1 v-0)))))))
(define Prelude-case--1052-1295 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--1053-1281 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-show_Show__Int (lambda (v-0) (((Prelude-showPrec_Show__Int) (vector 0 )) v-0)))
(define Prelude-showPrec_Show__Int (lambda () (lambda (v-0) (lambda (v-1) (Prelude-primNumShow 4294 (lambda (v-2) (number->string v-2)) v-0 v-1)))))
(define Prelude-pure_Applicative__IO (lambda (v-0 v-1) (PrimIO-io_pure 4294 v-1)))
(define Prelude-negate_Neg__Int (lambda (v-0) (b- ((Prelude-fromInteger_Num__Int) 0) v-0 63)))
(define Prelude-mod_Integral__Int (lambda (v-0 v-1) (Prelude-case--2237-2495 v-1 v-0 (Prelude-C-61C-61_Eq__Int v-1 ((Prelude-fromInteger_Num__Int) 0)))))
(define Prelude-min_Ord__Prec (lambda (v-0 v-1) (Prelude-case--5380-6074 v-1 v-0 (Prelude-C-60_Ord__Prec v-0 v-1))))
(define Prelude-min_Ord__Nat (lambda (v-0 v-1) (Prelude-case--3252-3689 v-1 v-0 (Prelude-C-60_Ord__Nat v-0 v-1))))
(define Prelude-min_Ord__Integer (lambda (v-0 v-1) (Prelude-case--1158-1388 v-1 v-0 (Prelude-C-60_Ord__Integer v-0 v-1))))
(define Prelude-min_Ord__Int (lambda (v-0 v-1) (Prelude-case--1053-1281 v-1 v-0 (Prelude-C-60_Ord__Int v-0 v-1))))
(define Prelude-max_Ord__Prec (lambda (v-0 v-1) (Prelude-case--5379-6088 v-1 v-0 (Prelude-C-62_Ord__Prec v-0 v-1))))
(define Prelude-max_Ord__Nat (lambda (v-0 v-1) (Prelude-case--3251-3703 v-1 v-0 (Prelude-C-62_Ord__Nat v-0 v-1))))
(define Prelude-max_Ord__Integer (lambda (v-0 v-1) (Prelude-case--1157-1402 v-1 v-0 (Prelude-C-62_Ord__Integer v-0 v-1))))
(define Prelude-max_Ord__Int (lambda (v-0 v-1) (Prelude-case--1052-1295 v-1 v-0 (Prelude-C-62_Ord__Int v-0 v-1))))
(define Prelude-map_Functor__IO (lambda (v-0 v-1 v-2 v-3) ((PrimIO-io_bind 4294 4294 v-3) (lambda (v-4) (PrimIO-io_pure 4294 (v-2 v-4))))))
(define Prelude-join_Monad__IO (lambda (v-0 v-1) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 v-1 (lambda (v-2) v-2))))
(define Prelude-fromInteger_Num__Nat (lambda (v-0) v-0))
(define Prelude-fromInteger_Num__Integer (lambda () (lambda (v-0) v-0)))
(define Prelude-fromInteger_Num__Int (lambda () (lambda (v-0) v-0)))
(define Prelude-div_Integral__Int (lambda (v-0 v-1) (Prelude-case--2236-2481 v-1 v-0 (Prelude-C-61C-61_Eq__Int v-1 ((Prelude-fromInteger_Num__Int) 0)))))
(define Prelude-compare_Ord__Prec (lambda (v-0 v-1) (let ((sc0 v-0)) (case (get-tag sc0) ((4) (let ((v-2 (vector-ref sc0 1))) (let ((sc1 v-1)) (case (get-tag sc1) ((4) (let ((v-3 (vector-ref sc1 1))) (Prelude-compare_Ord__Nat v-2 v-3)))(else (Prelude-compare_Ord__Integer (Prelude-precCon v-0) (Prelude-precCon v-1)))))))(else (Prelude-compare_Ord__Integer (Prelude-precCon v-0) (Prelude-precCon v-1)))))))
(define Prelude-compare_Ord__Nat (lambda (v-0 v-1) (let ((sc0 v-0)) (cond ((equal? sc0 0) (let ((sc1 v-1)) (cond ((equal? sc1 0) (vector 1 ))(else (let ((v-2 (- v-1 1))) (vector 0 ))))))(else (let ((v-2 (- v-0 1))) (let ((sc0 v-1)) (cond ((equal? sc0 0) (vector 2 ))(else (let ((v-3 (- v-1 1))) (Prelude-compare_Ord__Nat v-2 v-3)))))))))))
(define Prelude-compare_Ord__Integer (lambda (v-0 v-1) (Prelude-case--1152-1419 v-1 v-0 (Prelude-C-60_Ord__Integer v-0 v-1))))
(define Prelude-compare_Ord__Int (lambda (v-0 v-1) (Prelude-case--1047-1312 v-1 v-0 (Prelude-C-60_Ord__Int v-0 v-1))))
(define Prelude-abs_Abs__Int (lambda (v-0) (Prelude-case--2212-2449 v-0 (Prelude-C-60_Ord__Int v-0 ((Prelude-fromInteger_Num__Int) 0)))))
(define Prelude-__Impl_Show_Int (lambda () (vector 0 4294 (lambda (v-0) (Prelude-show_Show__Int v-0)) (lambda (v-0) (lambda (v-1) (((Prelude-showPrec_Show__Int) v-0) v-1))))))
(define Prelude-__Impl_Ord_Prec (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Prec v-0 v-1)))) (lambda (v-0) (lambda (v-1) (Prelude-compare_Ord__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60_Ord__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62_Ord__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60C-61_Ord__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62C-61_Ord__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-max_Ord__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-min_Ord__Prec v-0 v-1))))))
(define Prelude-__Impl_Ord_Nat (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Nat v-0 v-1)))) (lambda (v-0) (lambda (v-1) (Prelude-compare_Ord__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60_Ord__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62_Ord__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60C-61_Ord__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62C-61_Ord__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-max_Ord__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-min_Ord__Nat v-0 v-1))))))
(define Prelude-__Impl_Ord_Integer (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Integer v-0 v-1)))) (lambda (v-0) (lambda (v-1) (Prelude-compare_Ord__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60_Ord__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62_Ord__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60C-61_Ord__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62C-61_Ord__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-max_Ord__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-min_Ord__Integer v-0 v-1))))))
(define Prelude-__Impl_Ord_Int (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Int v-0 v-1)))) (lambda (v-0) (lambda (v-1) (Prelude-compare_Ord__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60_Ord__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62_Ord__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60C-61_Ord__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62C-61_Ord__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-max_Ord__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-min_Ord__Int v-0 v-1))))))
(define Prelude-__Impl_Num_Nat (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (((Prelude-C-43_Num__Nat) v-0) v-1))) (lambda (v-0) (lambda (v-1) (((Prelude-C-42_Num__Nat) v-0) v-1))) (lambda (v-0) (Prelude-fromInteger_Num__Nat v-0)))))
(define Prelude-__Impl_Num_Integer (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (((Prelude-C-43_Num__Integer) v-0) v-1))) (lambda (v-0) (lambda (v-1) (((Prelude-C-42_Num__Integer) v-0) v-1))) (lambda (v-0) ((Prelude-fromInteger_Num__Integer) v-0)))))
(define Prelude-__Impl_Num_Int (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (((Prelude-C-43_Num__Int) v-0) v-1))) (lambda (v-0) (lambda (v-1) (((Prelude-C-42_Num__Int) v-0) v-1))) (lambda (v-0) ((Prelude-fromInteger_Num__Int) v-0)))))
(define Prelude-__Impl_Neg_Int (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (((Prelude-C-43_Num__Int) v-0) v-1))) (lambda (v-0) (lambda (v-1) (((Prelude-C-42_Num__Int) v-0) v-1))) (lambda (v-0) ((Prelude-fromInteger_Num__Int) v-0))) (lambda (v-0) (Prelude-negate_Neg__Int v-0)) (lambda (v-0) (lambda (v-1) (((Prelude-C-45_Neg__Int) v-0) v-1))))))
(define Prelude-__Impl_Monad_IO (lambda () (vector 0 4294 (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__IO 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) (Prelude-pure_Applicative__IO 4294 v-1))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-60C-42C-62_Applicative__IO 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 v-2 v-3))))) (lambda (v-0) (lambda (v-1) (Prelude-join_Monad__IO 4294 v-1))))))
(define Prelude-__Impl_Integral_Int (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (((Prelude-C-43_Num__Int) v-0) v-1))) (lambda (v-0) (lambda (v-1) (((Prelude-C-42_Num__Int) v-0) v-1))) (lambda (v-0) ((Prelude-fromInteger_Num__Int) v-0))) (lambda (v-0) (lambda (v-1) (Prelude-div_Integral__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-mod_Integral__Int v-0 v-1))))))
(define Prelude-__Impl_Functor_IO (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__IO 4294 4294 v-2 v-3))))))))
(define Prelude-__Impl_Eq_Prec (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Prec v-0 v-1))))))
(define Prelude-__Impl_Eq_Ordering (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Ordering v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Ordering v-0 v-1))))))
(define Prelude-__Impl_Eq_Nat (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Nat v-0 v-1))))))
(define Prelude-__Impl_Eq_Integer (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Integer v-0 v-1))))))
(define Prelude-__Impl_Eq_Int (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Int v-0 v-1))))))
(define Prelude-__Impl_Eq_Char (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Char v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Char v-0 v-1))))))
(define Prelude-__Impl_Applicative_IO (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__IO 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) (Prelude-pure_Applicative__IO 4294 v-1))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-60C-42C-62_Applicative__IO 4294 4294 v-2 v-3))))))))
(define Prelude-__Impl_Abs_Int (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (((Prelude-C-43_Num__Int) v-0) v-1))) (lambda (v-0) (lambda (v-1) (((Prelude-C-42_Num__Int) v-0) v-1))) (lambda (v-0) ((Prelude-fromInteger_Num__Int) v-0))) (lambda (v-0) (Prelude-abs_Abs__Int v-0)))))
(define Prelude-C-62_Ord__Prec (lambda (v-0 v-1) (Prelude-C-61C-61_Eq__Ordering (Prelude-compare_Ord__Prec v-0 v-1) (vector 2 ))))
(define Prelude-C-62_Ord__Nat (lambda (v-0 v-1) (Prelude-C-61C-61_Eq__Ordering (Prelude-compare_Ord__Nat v-0 v-1) (vector 2 ))))
(define Prelude-C-62_Ord__Integer (lambda (v-0 v-1) (let ((sc0 (or (and (> v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-62_Ord__Int (lambda (v-0 v-1) (let ((sc0 (or (and (> v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-62C-62C-61_Monad__IO (lambda (v-0 v-1 v-2 v-3) ((PrimIO-io_bind 4294 4294 v-2) v-3)))
(define Prelude-C-62C-61_Ord__Prec (lambda (v-0 v-1) (Prelude-C-47C-61_Eq__Ordering (Prelude-compare_Ord__Prec v-0 v-1) (vector 0 ))))
(define Prelude-C-62C-61_Ord__Nat (lambda (v-0 v-1) (Prelude-C-47C-61_Eq__Ordering (Prelude-compare_Ord__Nat v-0 v-1) (vector 0 ))))
(define Prelude-C-62C-61_Ord__Integer (lambda (v-0 v-1) (let ((sc0 (or (and (>= v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-62C-61_Ord__Int (lambda (v-0 v-1) (let ((sc0 (or (and (>= v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-61C-61_Eq__Prec (lambda (v-0 v-1) (let ((sc0 v-0)) (case (get-tag sc0) ((4) (let ((v-2 (vector-ref sc0 1))) (let ((sc1 v-1)) (case (get-tag sc1) ((4) (let ((v-3 (vector-ref sc1 1))) (Prelude-C-61C-61_Eq__Nat v-2 v-3)))(else (Prelude-C-61C-61_Eq__Integer (Prelude-precCon v-0) (Prelude-precCon v-1)))))))(else (Prelude-C-61C-61_Eq__Integer (Prelude-precCon v-0) (Prelude-precCon v-1)))))))
(define Prelude-C-61C-61_Eq__Ordering (lambda (v-0 v-1) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (let ((sc1 v-1)) (case (get-tag sc1) ((0) (vector 0 ))(else (vector 1 ))))) ((1) (let ((sc1 v-1)) (case (get-tag sc1) ((1) (vector 0 ))(else (vector 1 ))))) ((2) (let ((sc1 v-1)) (case (get-tag sc1) ((2) (vector 0 ))(else (vector 1 )))))(else (vector 1 ))))))
(define Prelude-C-61C-61_Eq__Nat (lambda (v-0 v-1) (let ((sc0 v-0)) (cond ((equal? sc0 0) (let ((sc1 v-1)) (cond ((equal? sc1 0) (vector 0 ))(else (vector 1 )))))(else (let ((v-2 (- v-0 1))) (let ((sc0 v-1)) (cond ((equal? sc0 0) (vector 1 ))(else (let ((v-3 (- v-1 1))) (Prelude-C-61C-61_Eq__Nat v-2 v-3)))))))))))
(define Prelude-C-61C-61_Eq__Integer (lambda (v-0 v-1) (let ((sc0 (or (and (= v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-61C-61_Eq__Int (lambda (v-0 v-1) (let ((sc0 (or (and (= v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-61C-61_Eq__Char (lambda (v-0 v-1) (let ((sc0 (or (and (char=? v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-60_Ord__Prec (lambda (v-0 v-1) (Prelude-C-61C-61_Eq__Ordering (Prelude-compare_Ord__Prec v-0 v-1) (vector 0 ))))
(define Prelude-C-60_Ord__Nat (lambda (v-0 v-1) (Prelude-C-61C-61_Eq__Ordering (Prelude-compare_Ord__Nat v-0 v-1) (vector 0 ))))
(define Prelude-C-60_Ord__Integer (lambda (v-0 v-1) (let ((sc0 (or (and (< v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-60_Ord__Int (lambda (v-0 v-1) (let ((sc0 (or (and (< v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-60C-61_Ord__Prec (lambda (v-0 v-1) (Prelude-C-47C-61_Eq__Ordering (Prelude-compare_Ord__Prec v-0 v-1) (vector 2 ))))
(define Prelude-C-60C-61_Ord__Nat (lambda (v-0 v-1) (Prelude-C-47C-61_Eq__Ordering (Prelude-compare_Ord__Nat v-0 v-1) (vector 2 ))))
(define Prelude-C-60C-61_Ord__Integer (lambda (v-0 v-1) (let ((sc0 (or (and (<= v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-60C-61_Ord__Int (lambda (v-0 v-1) (let ((sc0 (or (and (<= v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-60C-42C-62_Applicative__IO (lambda (v-0 v-1 v-2 v-3) ((PrimIO-io_bind 4294 4294 v-2) (lambda (v-4) ((PrimIO-io_bind 4294 4294 v-3) (lambda (v-5) (PrimIO-io_pure 4294 (v-4 v-5))))))))
(define Prelude-C-47C-61_Eq__Prec (lambda (v-0 v-1) (Prelude-not (Prelude-C-61C-61_Eq__Prec v-0 v-1))))
(define Prelude-C-47C-61_Eq__Ordering (lambda (v-0 v-1) (Prelude-not (Prelude-C-61C-61_Eq__Ordering v-0 v-1))))
(define Prelude-C-47C-61_Eq__Nat (lambda (v-0 v-1) (Prelude-not (Prelude-C-61C-61_Eq__Nat v-0 v-1))))
(define Prelude-C-47C-61_Eq__Integer (lambda (v-0 v-1) (Prelude-not (Prelude-C-61C-61_Eq__Integer v-0 v-1))))
(define Prelude-C-47C-61_Eq__Int (lambda (v-0 v-1) (Prelude-not (Prelude-C-61C-61_Eq__Int v-0 v-1))))
(define Prelude-C-47C-61_Eq__Char (lambda (v-0 v-1) (Prelude-not (Prelude-C-61C-61_Eq__Char v-0 v-1))))
(define Prelude-C-45_Neg__Int (lambda () (lambda (v-0) (lambda (v-1) (b- v-0 v-1 63)))))
(define Prelude-C-43_Num__Nat (lambda () (lambda (v-0) (lambda (v-1) (+ v-0 v-1)))))
(define Prelude-C-43_Num__Integer (lambda () (lambda (v-0) (lambda (v-1) (+ v-0 v-1)))))
(define Prelude-C-43_Num__Int (lambda () (lambda (v-0) (lambda (v-1) (b+ v-0 v-1 63)))))
(define Prelude-C-42_Num__Nat (lambda () (lambda (v-0) (lambda (v-1) (* v-0 v-1)))))
(define Prelude-C-42_Num__Integer (lambda () (lambda (v-0) (lambda (v-1) (* v-0 v-1)))))
(define Prelude-C-42_Num__Int (lambda () (lambda (v-0) (lambda (v-1) (b* v-0 v-1 63)))))
(define Prelude-a-6873 (lambda () (lambda (v-0) (lambda (v-1) (vector 107 v-0)))))
(define Prelude-a-6871 (lambda () (lambda (v-0) (lambda (v-1) (vector 107 v-0)))))
(define Prelude-_-6861 (lambda () (lambda (v-0) (vector 107 ((Prelude-m-6839) v-0)))))
(define Prelude-_-6844 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 1 v-1 (lambda (v-3) ((Prelude-m-6839) v-0))))))))
(define Prelude-_-6843 (lambda () (lambda (v-0) (lambda (v-1) ((Prelude-m-6839) v-1)))))
(define Prelude-m-6839 (lambda () (lambda (v-0) (vector 107 v-0))))
(define Prelude-_-6825 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 1 v-1 (lambda (v-4) v-0))))))))
(define Prelude-a-6824 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 1 v-1 (lambda (v-4) v-0))))))))
(define Prelude-_-6795 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 107 v-1))))))
(define Prelude-_-6794 (lambda () (lambda (v-0) (lambda (v-1) (vector 107 (vector 1 v-1 (lambda (v-2) v-0)))))))
(define Prelude-f-6785 (lambda () (lambda (v-0) (vector 107 v-0))))
(define Prelude-_-6753 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) ((Prelude-f-6749) v-1))))))
(define Prelude-_-6752 (lambda () (lambda (v-0) (lambda (v-1) (vector 1 v-1 (lambda (v-2) v-0))))))
(define Prelude-f-6749 (lambda () (lambda (v-0) (vector 107 v-0))))
(define Prelude-_-2887 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 1 v-1 (lambda (v-7) (v-2 v-0))))))))))))
(define Prelude-_-2886 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (v-2 v-1)))))))))
(define Prelude-_-2641 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (v-2 v-1))))))))
(define Prelude-_-2640 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 1 v-1 (lambda (v-4) v-0))))))))
(define Prelude-C-124C-124 (lambda (v-0 v-1) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (vector 0 )) ((1) (v-1))))))
(define Prelude-take (lambda (v-0 v-1 v-2) (let ((sc0 v-1)) (cond ((equal? sc0 0) (vector 0 4294))(else (let ((v-3 (- v-1 1))) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (vector 1 4294 v-5 (Prelude-take 4294 v-3 (v-6)))))))))))))))
(define Prelude-showPrec (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (lambda (v-5) (lambda (v-6) ((v-4 v-5) v-6)))))))))))
(define Prelude-showParens (lambda (v-0 v-1) (let ((sc0 v-0)) (case (get-tag sc0) ((1) v-1) ((0) (Strings-Prelude-C-43C-43 "(" (Strings-Prelude-C-43C-43 v-1 ")")))))))
(define Prelude-show (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (lambda (v-5) (v-3 v-5))))))))))
(define Prelude-shiftR (lambda () (lambda (v-0) (lambda (v-1) (blodwen-shr v-0 v-1)))))
(define Prelude-pure (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) (lambda (v-7) ((v-5 4294) v-7)))))))))))
(define Prelude-primNumShow (lambda (v-0 v-1 v-2 v-3) (let ((v-4 (v-1 v-3))) (Prelude-showParens (Prelude-C-38C-38 (Prelude-C-62C-61_Ord__Prec v-2 (vector 5 )) (lambda () (Prelude-firstCharIs (lambda (v-5) (Prelude-C-61C-61_Eq__Char v-5 #\-)) v-4))) v-4))))
(define Prelude-precCon (lambda (v-0) (let ((sc0 v-0)) (case (get-tag sc0) ((0) ((Prelude-fromInteger_Num__Integer) 0)) ((1) ((Prelude-fromInteger_Num__Integer) 1)) ((2) ((Prelude-fromInteger_Num__Integer) 2)) ((3) ((Prelude-fromInteger_Num__Integer) 3)) ((4) (let ((v-1 (vector-ref sc0 1))) ((Prelude-fromInteger_Num__Integer) 4))) ((5) ((Prelude-fromInteger_Num__Integer) 5)) ((6) ((Prelude-fromInteger_Num__Integer) 6))))))
(define Prelude-plus (lambda (v-0 v-1) (let ((sc0 v-0)) (cond ((equal? sc0 0) v-1)(else (let ((v-2 (- v-0 1))) (+ 1 (+ v-2 v-1))))))))
(define Prelude-not (lambda (v-0) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (vector 1 )) ((1) (vector 0 ))))))
(define Prelude-negate (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (lambda (v-6) (v-4 v-6)))))))))))
(define Prelude-natToInteger (lambda (v-0) (let ((sc0 v-0)) (cond ((equal? sc0 0) ((Prelude-fromInteger_Num__Integer) 0))(else (let ((v-1 (- v-0 1))) (((Prelude-C-43_Num__Integer) ((Prelude-fromInteger_Num__Integer) 1)) v-1)))))))
(define Prelude-mult (lambda (v-0 v-1) (let ((sc0 v-0)) (cond ((equal? sc0 0) 0)(else (let ((v-2 (- v-0 1))) (+ v-1 (* v-2 v-1))))))))
(define Prelude-mod (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (lambda (v-6) (lambda (v-7) ((v-5 v-6) v-7))))))))))))
(define Prelude-map (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (lambda (v-6) (lambda (v-7) ((((v-5 4294) 4294) v-6) v-7))))))))))
(define Prelude-integerToNat (lambda (v-0) (Prelude-case--3176-3576 v-0 (let ((sc0 (or (and (<= v-0 ((Prelude-fromInteger_Num__Integer) 0)) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 )))))))
(define Prelude-intToBool (lambda (v-0) (let ((sc0 v-0)) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-id (lambda (v-0 v-1) v-1))
(define Prelude-fromInteger (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (lambda (v-6) (v-5 v-6)))))))))))
(define Prelude-firstCharIs (lambda (v-0 v-1) (let ((sc0 v-1)) (cond ((equal? sc0 "") (vector 1 ))(else (v-0 (string-ref v-1 0)))))))
(define Prelude-compare (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((v-6 (vector-ref sc0 5))) (let ((v-7 (vector-ref sc0 6))) (let ((v-8 (vector-ref sc0 7))) (let ((v-9 (vector-ref sc0 8))) (let ((v-10 (vector-ref sc0 9))) (lambda (v-11) (lambda (v-12) ((v-4 v-11) v-12)))))))))))))))))
(define Prelude-abs (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (lambda (v-5) (v-4 v-5))))))))))
(define Prelude-C-62C-62C-61 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (let ((v-7 (vector-ref sc0 4))) (lambda (v-8) (lambda (v-9) ((((v-6 4294) 4294) v-8) v-9))))))))))))
(define Prelude-C-62C-61 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((v-6 (vector-ref sc0 5))) (let ((v-7 (vector-ref sc0 6))) (let ((v-8 (vector-ref sc0 7))) (let ((v-9 (vector-ref sc0 8))) (let ((v-10 (vector-ref sc0 9))) (lambda (v-11) (lambda (v-12) ((v-8 v-11) v-12)))))))))))))))))
(define Prelude-C-62 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((v-6 (vector-ref sc0 5))) (let ((v-7 (vector-ref sc0 6))) (let ((v-8 (vector-ref sc0 7))) (let ((v-9 (vector-ref sc0 8))) (let ((v-10 (vector-ref sc0 9))) (lambda (v-11) (lambda (v-12) ((v-6 v-11) v-12)))))))))))))))))
(define Prelude-C-61C-61 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (lambda (v-5) (lambda (v-6) ((v-3 v-5) v-6)))))))))))
(define Prelude-C-60 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((v-6 (vector-ref sc0 5))) (let ((v-7 (vector-ref sc0 6))) (let ((v-8 (vector-ref sc0 7))) (let ((v-9 (vector-ref sc0 8))) (let ((v-10 (vector-ref sc0 9))) (lambda (v-11) (lambda (v-12) ((v-5 v-11) v-12)))))))))))))))))
(define Prelude-C-47C-61 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (lambda (v-5) (lambda (v-6) ((v-4 v-5) v-6)))))))))))
(define Prelude-C-46 (lambda (v-0 v-1 v-2 v-3 v-4) (lambda (v-5) (v-3 (v-4 v-5)))))
(define Prelude-C-45 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (lambda (v-6) (lambda (v-7) ((v-5 v-6) v-7))))))))))))
(define Strings-Prelude-C-43C-43 (lambda (v-0 v-1) (string-append v-0 v-1)))
(define Prelude-C-43 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (lambda (v-6) (lambda (v-7) ((v-3 v-6) v-7))))))))))))
(define Prelude-C-42 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (lambda (v-6) (lambda (v-7) ((v-4 v-6) v-7))))))))))))
(define Prelude-C-38C-38 (lambda (v-0 v-1) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (v-1)) ((1) (vector 1 ))))))
(define PrimIO-case--307-333 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (PrimIO-unsafeDestroyWorld 4294 v-6 v-5)))))))))
(define PrimIO-case--187-250 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7) (let ((sc0 v-7)) (case (get-tag sc0) ((0) (let ((v-8 (vector-ref sc0 1))) (let ((v-9 (vector-ref sc0 2))) (v-9 v-6))))))))
(define PrimIO-case--172-231 (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-5)) (case (get-tag sc0) ((0) (let ((v-6 (vector-ref sc0 1))) (let ((v-7 (vector-ref sc0 2))) (let ((v-8 (vector-ref sc0 3))) (PrimIO-case--187-250 4294 4294 4294 4294 4294 v-7 v-8 (v-3 v-7))))))))))
(define PrimIO-_-222 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 1 v-1 (lambda (v-3) (vector 107 v-0))))))))
(define PrimIO-unsafePerformIO (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (PrimIO-unsafeCreateWorld 4294 (lambda (v-4) (PrimIO-case--307-333 4294 v-3 4294 (v-3 v-4)))))))))))
(define PrimIO-unsafeDestroyWorld (lambda (v-0 v-1 v-2) (let ((sc0 v-1)) (cond ((equal? sc0 #f) v-2)))))
(define PrimIO-unsafeCreateWorld (lambda (v-0 v-1) (v-1 #f)))
(define PrimIO-schemeCall (lambda (v-0 v-1 v-2) (vector 0 4294 (lambda (v-3) (vector 0 #f (apply (eval (string->symbol v-1)) (blodwen-read-args v-2)) #f)))))
(define PrimIO-putStrLn (lambda (v-0) (PrimIO-putStr (string-append v-0 "\xa;"))))
(define PrimIO-putStr (lambda (v-0) (vector 0 4294 (lambda (v-1) (display v-0) (vector 0 #f (vector 0 ) #f)))))
(define PrimIO-prim__schemeCall (lambda (v-0 v-1 v-2 v-3) (vector 0 #f (apply (eval (string->symbol v-1)) (blodwen-read-args v-2)) #f)))
(define PrimIO-prim__putStr (lambda (v-0 v-1) (display v-0) (vector 0 #f (vector 0 ) #f)))
(define PrimIO-prim__getStr (lambda (v-0) (vector 0 #f (get-line (current-input-port)) #f)))
(define PrimIO-primIO (lambda (v-0 v-1) (vector 0 4294 v-1)))
(define PrimIO-io_pure (lambda (v-0 v-1) (vector 0 4294 (lambda (v-2) (vector 0 4294 v-1 v-2)))))
(define PrimIO-io_bind (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (lambda (v-5) (vector 0 4294 (lambda (v-6) (PrimIO-case--172-231 4294 4294 4294 v-5 4294 (v-4 v-6))))))))))))
(define PrimIO-getLine (lambda () (vector 0 4294 (lambda (v-0) (vector 0 #f (get-line (current-input-port)) #f)))))
(define Builtin-sym (lambda (v-0 v-1 v-2 v-3) (vector 0 4294 4294)))
(define Builtin-rewrite__impl (lambda (v-0 v-1 v-2 v-3 v-4 v-5) v-5))
(define Builtin-assert_total (lambda (v-0 v-1) v-1))
(define Nat-Data-x-730 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (+ v-1 (+ 1 v-0)))))))
(define Nat-Data-y-727 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (+ v-1 (+ 1 v-0)))))))
(define Nat-Data-x-726 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (+ 1 (((Prelude-C-43_Num__Nat) v-1) v-0)))))))
(define Nat-Data-y-719 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (+ v-1 v-0))))))
(define Nat-Data-x-718 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (+ v-0 v-1))))))
(define Nat-Data-_-713 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 105 ) (vector 105 ) (((Prelude-C-43_Num__Nat) v-0) v-1) (((Prelude-C-43_Num__Nat) v-1) v-0))))))
(define Nat-Data-x-707 (lambda () (lambda (v-0) (+ v-0 (Prelude-fromInteger_Num__Nat 0)))))
(define Nat-Data-x-696 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (+ 1 ((((Nat-Data-y-693) v-0) v-1) v-2)))))))
(define Nat-Data-y-693 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (+ v-0 (+ 1 v-1)))))))
(define Nat-Data-x-692 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (+ 1 (((Prelude-C-43_Num__Nat) v-0) v-1)))))))
(define Nat-Data-_-687 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 105 ) (vector 105 ) (+ 1 (((Prelude-C-43_Num__Nat) v-0) v-1)) (((Prelude-C-43_Num__Nat) v-0) (+ 1 v-1)))))))
(define Nat-Data-x-685 (lambda () (lambda (v-0) (+ 1 (((Prelude-C-43_Num__Nat) 0) v-0)))))
(define Nat-Data-x-677 (lambda () (lambda (v-0) (lambda (v-1) (+ 1 v-0)))))
(define Nat-Data-x-673 (lambda () (lambda (v-0) (lambda (v-1) (+ v-0 (Prelude-fromInteger_Num__Nat 0))))))
(define Nat-Data-_-668 (lambda () (lambda (v-0) (vector 109 (vector 105 ) (vector 105 ) (((Prelude-C-43_Num__Nat) v-0) (Prelude-fromInteger_Num__Nat 0)) v-0))))
(define Nat-Data-plusZeroRightNeutral (lambda (v-0) (let ((sc0 v-0)) (cond ((equal? sc0 0) (vector 0 4294 4294))(else (let ((v-1 (- v-0 1))) (let ((v-2 (Nat-Data-plusZeroRightNeutral v-1))) (vector 0 4294 4294))))))))
(define Nat-Data-plusSuccRightSucc (lambda (v-0 v-1) (let ((sc0 v-0)) (cond ((equal? sc0 0) (vector 0 4294 4294))(else (let ((v-2 (- v-0 1))) (let ((v-3 (Nat-Data-plusSuccRightSucc v-2 v-1))) (vector 0 4294 4294))))))))
(define Nat-Data-plusCommutative (lambda (v-0 v-1) (let ((sc0 v-0)) (cond ((equal? sc0 0) (vector 0 4294 4294))(else (let ((v-2 (- v-0 1))) (let ((v-3 (Nat-Data-plusCommutative v-2 v-1))) (vector 0 4294 4294))))))))
(define n--2510-3395-go (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6) (let ((sc0 v-6)) (case (get-tag sc0) ((0) (let ((v-7 (vector-ref sc0 1))) v-5)) ((1) (let ((v-7 (vector-ref sc0 1))) (let ((v-8 (vector-ref sc0 2))) (let ((v-9 (vector-ref sc0 3))) (let ((v-10 (vector-ref sc0 4))) (n--2510-3395-go 4294 4294 v-2 4294 4294 (vector 1 4294 4294 v-9 v-5) v-10))))))))))
(define Vect-Data-map_Functor__C-40VectC-32C-36nC-41 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (let ((v-5 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-5 (vector-ref sc0 1))) (let ((v-6 (vector-ref sc0 2))) (let ((v-7 (vector-ref sc0 3))) (let ((v-8 (vector-ref sc0 4))) (vector 1 4294 4294 (v-3 v-7) (Vect-Data-map_Functor__C-40VectC-32C-36nC-41 4294 4294 4294 v-3 v-8)))))))))))
(define Vect-Data-__Impl_Functor_C-40VectC-32C-36nC-41 (lambda (v-0) (vector 0 4294 (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (Vect-Data-map_Functor__C-40VectC-32C-36nC-41 4294 4294 4294 v-3 v-4))))))))
(define Vect-Data-__Impl_Eq_C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 (lambda (v-0 v-1 v-2) (vector 0 4294 (lambda (v-3) (lambda (v-4) (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 v-2 v-3 v-4))) (lambda (v-3) (lambda (v-4) (Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 v-2 v-3 v-4))))))
(define Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-5 (vector-ref sc0 1))) (let ((sc1 v-4)) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (vector 0 ))))))) ((1) (let ((v-5 (vector-ref sc0 1))) (let ((v-6 (vector-ref sc0 2))) (let ((v-7 (vector-ref sc0 3))) (let ((v-8 (vector-ref sc0 4))) (let ((sc1 v-4)) (case (get-tag sc1) ((1) (let ((v-9 (vector-ref sc1 1))) (let ((v-10 (vector-ref sc1 2))) (let ((v-11 (vector-ref sc1 3))) (let ((v-12 (vector-ref sc1 4))) (Prelude-C-38C-38 (let ((sc2 v-2)) (case (get-tag sc2) ((0) (let ((v-13 (vector-ref sc2 1))) (let ((v-14 (vector-ref sc2 2))) (let ((v-15 (vector-ref sc2 3))) ((v-14 v-7) v-11))))))) (lambda () (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 v-2 v-8 v-12)))))))))))))))))))
(define Vect-Data-C-47C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 (lambda (v-0 v-1 v-2 v-3 v-4) (Prelude-not (Vect-Data-C-61C-61_Eq__C-40C-40VectC-32C-36lenC-41C-32C-36elemC-41 4294 4294 v-2 v-3 v-4))))
(define Vect-Data-f-4219 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 110 v-2 v-6))))))))))
(define Vect-Data-_-4178 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (((Vect-Data-f-4174) v-0) v-2)))))))
(define Vect-Data-_-4177 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 1 v-2 (lambda (v-3) v-1)))))))
(define Vect-Data-f-4174 (lambda () (lambda (v-0) (lambda (v-1) (vector 110 v-0 v-1)))))
(define Vect-Data-elem-3861 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) v-1)))))))
(define Vect-Data-len-3860 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) v-0)))))))
(define Vect-Data-ty-3859 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 110 ((((((Vect-Data-len-3860) v-0) v-1) v-2) v-3) v-4) ((((((Vect-Data-elem-3861) v-0) v-1) v-2) v-3) v-4)))))))))
(define Vect-Data-_-3849 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 110 v-2 v-0)))))))
(define Vect-Data-_-3848 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 110 v-2 v-0))))))
(define Vect-Data-ty-3842 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 110 v-2 v-0))))))
(define Vect-Data-len-3545 (lambda () (lambda (v-0) (lambda (v-1) 0))))
(define Vect-Data-len-3543 (lambda () (lambda (v-0) (lambda (v-1) (+ (List-Data-length v-0 v-1) (((Vect-Data-len-3545) v-0) v-1))))))
(define Vect-Data-y-3539 (lambda () (lambda (v-0) (lambda (v-1) (+ (((Vect-Data-y-3530) v-0) v-1) (Prelude-fromInteger_Num__Nat 0))))))
(define Vect-Data-x-3538 (lambda () (lambda (v-0) (lambda (v-1) (List-Data-length v-0 v-1)))))
(define Vect-Data-left-3532 (lambda () (lambda (v-0) (lambda (v-1) (((Vect-Data-y-3530) v-0) v-1)))))
(define Vect-Data-x-3531 (lambda () (lambda (v-0) (lambda (v-1) (+ (((Vect-Data-left-3532) v-0) v-1) (Prelude-fromInteger_Num__Nat 0))))))
(define Vect-Data-y-3530 (lambda () (lambda (v-0) (lambda (v-1) (List-Data-length v-0 v-1)))))
(define Vect-Data-len-3520 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (+ 1 v-3))))))))
(define Vect-Data-y-3517 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (+ ((((((Vect-Data-left-3510) v-0) v-1) v-2) v-3) v-4) (+ 1 v-3)))))))))
(define Vect-Data-x-3516 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (+ 1 (((Prelude-C-43_Num__Nat) ((((((Vect-Data-left-3510) v-0) v-1) v-2) v-3) v-4)) v-3)))))))))
(define Vect-Data-a-3511 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) v-0)))))))
(define Vect-Data-left-3510 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (List-Data-length ((((((Vect-Data-a-3511) v-0) v-1) v-2) v-3) v-4) v-2))))))))
(define Vect-Data-n-3427 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (+ 1 v-6)))))))))))
(define Vect-Data-y-3424 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (+ 1 (((Prelude-C-43_Num__Nat) v-6) v-3))))))))))))
(define Vect-Data-x-3423 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (+ v-6 (+ 1 v-3))))))))))))
(define Vect-Data-x-3418 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (+ 1 (((Prelude-C-43_Num__Nat) v-6) v-3))))))))))))
(define Vect-Data-y-3417 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (+ v-6 (+ 1 v-3))))))))))))
(define Vect-Data-x-3407 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (+ v-3 (Prelude-fromInteger_Num__Nat 0)))))))))
(define Vect-Data-len-3194 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (+ v-2 v-0)))))))))
(define Vect-Data-tail (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) v-6)))))))))
(define Vect-Data-reverse (lambda (v-0 v-1 v-2) (n--2510-3395-go 4294 4294 v-2 4294 4294 (vector 0 4294) v-2)))
(define Vect-Data-replicate (lambda (v-0 v-1 v-2) (let ((sc0 v-1)) (cond ((equal? sc0 0) (vector 0 4294))(else (let ((v-3 (- v-1 1))) (vector 1 4294 4294 v-2 (Vect-Data-replicate 4294 v-3 v-2))))))))
(define Vect-Data-index (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((sc1 v-3)) (case (get-tag sc1) ((1) (let ((v-5 (vector-ref sc1 1))) (let ((v-6 (vector-ref sc1 2))) (let ((v-7 (vector-ref sc1 3))) (let ((v-8 (vector-ref sc1 4))) v-7))))))))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((sc1 v-3)) (case (get-tag sc1) ((1) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) (let ((v-9 (vector-ref sc1 4))) (Vect-Data-index 4294 4294 v-5 v-9)))))))))))))))
(define Vect-Data-head (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) v-5)))))))))
(define Vect-Data-fromListC-39 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) v-2)) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (Vect-Data-fromListC-39 4294 4294 (vector 1 4294 4294 v-5 v-2) v-6)))))))))
(define Vect-Data-fromList (lambda (v-0 v-1) (Vect-Data-reverse 4294 4294 (Vect-Data-fromListC-39 4294 4294 (vector 0 4294) v-1))))
(define Vect-Data-C-43C-43 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-5 (vector-ref sc0 1))) v-4)) ((1) (let ((v-5 (vector-ref sc0 1))) (let ((v-6 (vector-ref sc0 2))) (let ((v-7 (vector-ref sc0 3))) (let ((v-8 (vector-ref sc0 4))) (vector 1 4294 4294 v-7 (Vect-Data-C-43C-43 4294 4294 4294 v-8 v-4)))))))))))
(define Fin-Data-with--2046-2758 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-2)) (case (get-tag sc0) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((sc1 v-3)) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) v-5))))))))))))
(define Fin-Data-case--2018-2743 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (Fin-Data-natToFin (Prelude-fromInteger_Num__Nat v-1) v-0)) ((1) (vector 0 4294))))))
(define Fin-Data-case--1980-2709 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (vector 1 4294 (vector 1 4294 v-4))))) ((0) (let ((v-3 (vector-ref sc0 1))) (vector 0 4294)))))))
(define Fin-Data-ty-2756 (lambda () (lambda (v-0) (lambda (v-1) (vector 111 v-0)))))
(define Fin-Data-ty-2734 (lambda () (lambda (v-0) (vector 111 0))))
(define Fin-Data-ty-2731 (lambda () (lambda (v-0) (lambda (v-1) (vector 111 v-1)))))
(define Fin-Data-ty-2726 (lambda () (lambda (v-0) (lambda (v-1) (vector 111 (+ 1 v-1))))))
(define Fin-Data-ty-2717 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 111 (+ 1 v-1)))))))
(define Fin-Data-ty-2701 (lambda () (lambda (v-0) (vector 111 (+ 1 v-0)))))
(define Fin-Data-natToFin (lambda (v-0 v-1) (let ((sc0 v-0)) (cond ((equal? sc0 0) (let ((sc1 v-1)) (cond ((equal? sc1 0) (vector 0 4294))(else (let ((v-2 (- v-1 1))) (vector 1 4294 (vector 0 4294)))))))(else (let ((v-2 (- v-0 1))) (let ((sc0 v-1)) (cond ((equal? sc0 0) (vector 0 4294))(else (let ((v-3 (- v-1 1))) (Fin-Data-case--1980-2709 v-2 v-3 (Fin-Data-natToFin v-2 v-3))))))))))))
(define Fin-Data-integerToFin (lambda (v-0 v-1) (let ((sc0 v-1)) (cond ((equal? sc0 0) (vector 0 4294))(else (Fin-Data-case--2018-2743 v-1 v-0 (Prelude-C-62C-61_Ord__Integer v-0 ((Prelude-fromInteger_Num__Integer) 0))))))))
(define Fin-Data-fromInteger (lambda (v-0 v-1 v-2) (Fin-Data-with--2046-2758 v-1 v-0 (Fin-Data-integerToFin v-0 v-1) v-2)))
(define List-Data-length (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) 0)) ((1) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (+ 1 (List-Data-length 4294 v-4))))))))))
(PrimIO-unsafePerformIO 4294 (Main-main)))